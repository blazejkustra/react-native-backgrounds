diff --git a/node_modules/react-native-web/.DS_Store b/node_modules/react-native-web/.DS_Store
new file mode 100644
index 0000000..9de77ec
Binary files /dev/null and b/node_modules/react-native-web/.DS_Store differ
diff --git a/node_modules/react-native-web/dist/cjs/exports/Image/index.js b/node_modules/react-native-web/dist/cjs/exports/Image/index.js
index c76ecde..b0864cc 100644
--- a/node_modules/react-native-web/dist/cjs/exports/Image/index.js
+++ b/node_modules/react-native-web/dist/cjs/exports/Image/index.js
@@ -290,6 +290,22 @@ Image.displayName = 'Image';
 
 // $FlowIgnore: This is the correct type, but casting makes it unhappy since the variables aren't defined yet
 var ImageWithStatics = Image;
+ImageWithStatics.resolveAssetSource = function resolveAssetSource(source) {
+  var uri = resolveAssetUri(source) || '';
+  var dimensions = resolveAssetDimensions(source) || {};
+  var width, height;
+  if (typeof dimensions.width === 'number') {
+    width = dimensions.width;
+  }
+  if (typeof dimensions.height === 'number') {
+    height = dimensions.height;
+  }
+  return {
+    uri,
+    width,
+    height
+  };
+};
 ImageWithStatics.getSize = function (uri, success, failure) {
   _ImageLoader.default.getSize(uri, success, failure);
 };
diff --git a/node_modules/react-native-web/dist/exports/Image/index.js b/node_modules/react-native-web/dist/exports/Image/index.js
index 348831d..0d20f70 100644
--- a/node_modules/react-native-web/dist/exports/Image/index.js
+++ b/node_modules/react-native-web/dist/exports/Image/index.js
@@ -285,6 +285,22 @@ Image.displayName = 'Image';
 
 // $FlowIgnore: This is the correct type, but casting makes it unhappy since the variables aren't defined yet
 var ImageWithStatics = Image;
+ImageWithStatics.resolveAssetSource = function resolveAssetSource(source) {
+  var uri = resolveAssetUri(source) || '';
+  var dimensions = resolveAssetDimensions(source) || {};
+  var width, height;
+  if (typeof dimensions.width === 'number') {
+    width = dimensions.width;
+  }
+  if (typeof dimensions.height === 'number') {
+    height = dimensions.height;
+  }
+  return {
+    uri,
+    width,
+    height
+  };
+};
 ImageWithStatics.getSize = function (uri, success, failure) {
   ImageLoader.getSize(uri, success, failure);
 };
diff --git a/node_modules/react-native-web/dist/exports/Image/index.js.flow b/node_modules/react-native-web/dist/exports/Image/index.js.flow
index 9c53bdd..d01b34f 100644
--- a/node_modules/react-native-web/dist/exports/Image/index.js.flow
+++ b/node_modules/react-native-web/dist/exports/Image/index.js.flow
@@ -10,7 +10,7 @@
 
 'use client';
 
-import type { ImageProps } from './types';
+import type { ImageProps, Source } from './types';
 import * as React from 'react';
 import createElement from '../createElement';
 import { getAssetByID } from '../../modules/AssetRegistry';
@@ -34,6 +34,11 @@ declare function resolveAssetDimensions(source: any): any;
 declare function resolveAssetUri(source: any): ?string;
 interface ImageStatics {
   getSize: (uri: string, success: (width: number, height: number) => void, failure: () => void) => void,
+  resolveAssetSource: (source: Source) => {
+    uri: string,
+    width?: number,
+    height?: number,
+  },
   prefetch: (uri: string) => Promise<void>,
   queryCache: (uris: Array<string>) => Promise<{|
     [uri: string]: 'disk/memory'
@@ -150,6 +155,26 @@ Image.displayName = 'Image';
 
 // $FlowIgnore: This is the correct type, but casting makes it unhappy since the variables aren't defined yet
 const ImageWithStatics = (Image: React.AbstractComponent<ImageProps, React.ElementRef<typeof View>> & ImageStatics);
+ImageWithStatics.resolveAssetSource = function resolveAssetSource(source): {
+  uri: string,
+  width?: number,
+  height?: number,
+} {
+  const uri = resolveAssetUri(source) || '';
+  const dimensions = resolveAssetDimensions(source) || {};
+  let width, height;
+  if (typeof dimensions.width === 'number') {
+    width = dimensions.width;
+  }
+  if (typeof dimensions.height === 'number') {
+    height = dimensions.height;
+  }
+  return {
+    uri,
+    width,
+    height
+  };
+};
 ImageWithStatics.getSize = function (uri, success, failure) {
   ImageLoader.getSize(uri, success, failure);
 };
