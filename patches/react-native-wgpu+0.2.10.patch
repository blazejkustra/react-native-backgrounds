
diff --git a/node_modules/react-native-wgpu/lib/commonjs/Canvas.js b/node_modules/react-native-wgpu/lib/commonjs/Canvas.js
index a39995a..5f9128b 100644
--- a/node_modules/react-native-wgpu/lib/commonjs/Canvas.js
+++ b/node_modules/react-native-wgpu/lib/commonjs/Canvas.js
@@ -5,9 +5,10 @@ Object.defineProperty(exports, "__esModule", {
 });
 exports.Canvas = void 0;
 var _reactNative = require("react-native");
-var _react = require("react");
+var _react = _interopRequireWildcard(require("react"));
 var _WebGPUViewNativeComponent = _interopRequireDefault(require("./WebGPUViewNativeComponent"));
 function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
 function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
 let CONTEXT_COUNTER = 1;
 function generateContextId() {
@@ -59,8 +60,7 @@ const Canvas = exports.Canvas = /*#__PURE__*/(0, _react.forwardRef)(({
   ...props
 }, ref) => {
   const viewRef = (0, _react.useRef)(null);
-  const FABRIC = RNWebGPU.fabric;
-  const useSize = FABRIC ? useSizeFabric : useSizePaper;
+  const useSize = RNWebGPU.fabric ? useSizeFabric : useSizePaper;
   const [contextId, _] = (0, _react.useState)(() => generateContextId());
   const cb = (0, _react.useRef)();
   const {
@@ -68,9 +68,13 @@ const Canvas = exports.Canvas = /*#__PURE__*/(0, _react.forwardRef)(({
     onLayout
   } = useSize(viewRef);
   (0, _react.useEffect)(() => {
-    if (size && cb.current) {
+    const hasNonZeroDims = !!size?.height && !!size?.width;
+    if (size && hasNonZeroDims && cb.current) {
       cb.current();
     }
+    if (size && !hasNonZeroDims) {
+      console.warn([`react-native-wgpu canvas has zero dimensions (width:${size.width}px; height:${size.height}px)!`, "Unable to initialize underlying canvas."].join(" "));
+    }
   }, [size]);
   (0, _react.useImperativeHandle)(ref, () => ({
     getContextId: () => contextId,
@@ -97,11 +101,11 @@ const Canvas = exports.Canvas = /*#__PURE__*/(0, _react.forwardRef)(({
       return RNWebGPU.MakeWebGPUCanvasContext(contextId, size.width, size.height);
     }
   }));
-  return /*#__PURE__*/React.createElement(_reactNative.View, _extends({
+  return /*#__PURE__*/_react.default.createElement(_reactNative.View, _extends({
     collapsable: false,
     ref: viewRef,
     onLayout: onLayout
-  }, props), /*#__PURE__*/React.createElement(_WebGPUViewNativeComponent.default, {
+  }, props), /*#__PURE__*/_react.default.createElement(_WebGPUViewNativeComponent.default, {
     style: {
       flex: 1
     },
diff --git a/node_modules/react-native-wgpu/lib/commonjs/Canvas.js.map b/node_modules/react-native-wgpu/lib/commonjs/Canvas.js.map
index cc6249e..8de1a8f 100644
--- a/node_modules/react-native-wgpu/lib/commonjs/Canvas.js.map
+++ b/node_modules/react-native-wgpu/lib/commonjs/Canvas.js.map
@@ -1 +1 @@
-{"version":3,"names":["_reactNative","require","_react","_WebGPUViewNativeComponent","_interopRequireDefault","e","__esModule","default","_extends","Object","assign","bind","n","arguments","length","t","r","hasOwnProperty","call","apply","CONTEXT_COUNTER","generateContextId","useSizeFabric","ref","size","setSize","useState","useLayoutEffect","current","Error","measureInWindow","_x","_y","width","height","onLayout","undefined","useSizePaper","_ref","useCallback","nativeEvent","layout","Canvas","exports","forwardRef","_onLayout","transparent","props","viewRef","useRef","FABRIC","RNWebGPU","fabric","useSize","contextId","_","cb","useEffect","useImperativeHandle","getContextId","getNativeSurface","whenReady","callback","getContext","contextName","MakeWebGPUCanvasContext","React","createElement","View","collapsable","style","flex"],"sourceRoot":"../../src","sources":["Canvas.tsx"],"mappings":"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","ignoreList":[]}
+{"version":3,"names":["_reactNative","require","_react","_interopRequireWildcard","_WebGPUViewNativeComponent","_interopRequireDefault","e","__esModule","default","t","WeakMap","r","n","o","i","f","__proto__","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_extends","assign","bind","arguments","length","apply","CONTEXT_COUNTER","generateContextId","useSizeFabric","ref","size","setSize","useState","useLayoutEffect","current","Error","measureInWindow","_x","_y","width","height","onLayout","undefined","useSizePaper","_ref","useCallback","nativeEvent","layout","Canvas","exports","forwardRef","_onLayout","transparent","props","viewRef","useRef","useSize","RNWebGPU","fabric","contextId","_","cb","useEffect","hasNonZeroDims","console","warn","join","useImperativeHandle","getContextId","getNativeSurface","whenReady","callback","getContext","contextName","MakeWebGPUCanvasContext","createElement","View","collapsable","style","flex"],"sourceRoot":"../../src","sources":["Canvas.tsx"],"mappings":"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","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/commonjs/WebGPUView.js b/node_modules/react-native-wgpu/lib/commonjs/WebGPUView.js
deleted file mode 100644
index affd447..0000000
--- a/node_modules/react-native-wgpu/lib/commonjs/WebGPUView.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-//# sourceMappingURL=WebGPUView.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/commonjs/WebGPUView.js.map b/node_modules/react-native-wgpu/lib/commonjs/WebGPUView.js.map
deleted file mode 100644
index b155bf5..0000000
--- a/node_modules/react-native-wgpu/lib/commonjs/WebGPUView.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":[],"sourceRoot":"../../src","sources":["WebGPUView.tsx"],"mappings":"","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/commonjs/WebGPUViewNativeComponent.web.js b/node_modules/react-native-wgpu/lib/commonjs/WebGPUViewNativeComponent.web.js
new file mode 100644
index 0000000..6358a1a
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/commonjs/WebGPUViewNativeComponent.web.js
@@ -0,0 +1,85 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = WebGPUViewNativeComponent;
+var _lodash = _interopRequireDefault(require("lodash"));
+var _react = require("react");
+var _reactNative = require("react-native");
+var _reactNativeWeb = require("react-native-web");
+var _utils = require("./utils");
+function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+function resizeCanvas(canvas) {
+  if (!canvas) {
+    return;
+  }
+  const dpr = window.devicePixelRatio || 1;
+  const {
+    height,
+    width
+  } = canvas.getBoundingClientRect();
+  canvas.setAttribute("height", (height * dpr).toString());
+  canvas.setAttribute("width", (width * dpr).toString());
+}
+
+// eslint-disable-next-line import/no-default-export
+function WebGPUViewNativeComponent(props) {
+  const {
+    contextId,
+    style,
+    transparent,
+    ...rest
+  } = props;
+  const canvasElm = (0, _react.useRef)();
+  (0, _react.useEffect)(() => {
+    const onResize = _lodash.default.debounce(() => resizeCanvas(canvasElm.current), 100, {
+      leading: false,
+      trailing: true,
+      maxWait: 2000
+    });
+    window.addEventListener("resize", onResize);
+    return () => {
+      window.removeEventListener("resize", onResize);
+    };
+  }, []);
+  return (0, _reactNativeWeb.unstable_createElement)("canvas", {
+    ...rest,
+    style: [styles.view, styles.flex1, transparent === false && {
+      backgroundColor: "white"
+    },
+    // Canvas elements are transparent by default on the web
+    style],
+    id: (0, _utils.contextIdToId)(contextId),
+    ref: ref => {
+      canvasElm.current = ref;
+      if (ref) {
+        resizeCanvas(ref);
+      }
+    }
+  });
+}
+const styles = _reactNative.StyleSheet.create({
+  flex1: {
+    flex: 1
+  },
+  view: {
+    alignItems: "stretch",
+    backgroundColor: "transparent",
+    // @ts-expect-error - not a valid RN style, but it's valid for web
+    border: "0 solid black",
+    boxSizing: "border-box",
+    display: "flex",
+    flexBasis: "auto",
+    flexDirection: "column",
+    flexShrink: 0,
+    listStyle: "none",
+    margin: 0,
+    minHeight: 0,
+    minWidth: 0,
+    padding: 0,
+    position: "relative",
+    zIndex: 0
+  }
+});
+//# sourceMappingURL=WebGPUViewNativeComponent.web.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/commonjs/WebGPUViewNativeComponent.web.js.map b/node_modules/react-native-wgpu/lib/commonjs/WebGPUViewNativeComponent.web.js.map
new file mode 100644
index 0000000..4a492f8
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/commonjs/WebGPUViewNativeComponent.web.js.map
@@ -0,0 +1 @@
+{"version":3,"names":["_lodash","_interopRequireDefault","require","_react","_reactNative","_reactNativeWeb","_utils","e","__esModule","default","resizeCanvas","canvas","dpr","window","devicePixelRatio","height","width","getBoundingClientRect","setAttribute","toString","WebGPUViewNativeComponent","props","contextId","style","transparent","rest","canvasElm","useRef","useEffect","onResize","_","debounce","current","leading","trailing","maxWait","addEventListener","removeEventListener","unstableCreateElement","styles","view","flex1","backgroundColor","id","contextIdToId","ref","StyleSheet","create","flex","alignItems","border","boxSizing","display","flexBasis","flexDirection","flexShrink","listStyle","margin","minHeight","minWidth","padding","position","zIndex"],"sourceRoot":"../../src","sources":["WebGPUViewNativeComponent.web.ts"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,eAAA,GAAAH,OAAA;AAIA,IAAAI,MAAA,GAAAJ,OAAA;AAAwC,SAAAD,uBAAAM,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAOxC,SAASG,YAAYA,CAACC,MAA0B,EAAE;EAChD,IAAI,CAACA,MAAM,EAAE;IACX;EACF;EAEA,MAAMC,GAAG,GAAGC,MAAM,CAACC,gBAAgB,IAAI,CAAC;EAExC,MAAM;IAAEC,MAAM;IAAEC;EAAM,CAAC,GAAGL,MAAM,CAACM,qBAAqB,CAAC,CAAC;EACxDN,MAAM,CAACO,YAAY,CAAC,QAAQ,EAAE,CAACH,MAAM,GAAGH,GAAG,EAAEO,QAAQ,CAAC,CAAC,CAAC;EACxDR,MAAM,CAACO,YAAY,CAAC,OAAO,EAAE,CAACF,KAAK,GAAGJ,GAAG,EAAEO,QAAQ,CAAC,CAAC,CAAC;AACxD;;AAEA;AACe,SAASC,yBAAyBA,CAACC,KAAkB,EAAE;EACpE,MAAM;IAAEC,SAAS;IAAEC,KAAK;IAAEC,WAAW;IAAE,GAAGC;EAAK,CAAC,GAAGJ,KAAK;EAExD,MAAMK,SAAS,GAAG,IAAAC,aAAM,EAAoB,CAAC;EAE7C,IAAAC,gBAAS,EAAC,MAAM;IACd,MAAMC,QAAQ,GAAGC,eAAC,CAACC,QAAQ,CAAC,MAAMrB,YAAY,CAACgB,SAAS,CAACM,OAAO,CAAC,EAAE,GAAG,EAAE;MACtEC,OAAO,EAAE,KAAK;MACdC,QAAQ,EAAE,IAAI;MACdC,OAAO,EAAE;IACX,CAAC,CAAC;IACFtB,MAAM,CAACuB,gBAAgB,CAAC,QAAQ,EAAEP,QAAQ,CAAC;IAC3C,OAAO,MAAM;MACXhB,MAAM,CAACwB,mBAAmB,CAAC,QAAQ,EAAER,QAAQ,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,IAAAS,sCAAqB,EAAC,QAAQ,EAAE;IACrC,GAAGb,IAAI;IACPF,KAAK,EAAE,CACLgB,MAAM,CAACC,IAAI,EACXD,MAAM,CAACE,KAAK,EACZjB,WAAW,KAAK,KAAK,IAAI;MAAEkB,eAAe,EAAE;IAAQ,CAAC;IAAE;IACvDnB,KAAK,CACN;IACDoB,EAAE,EAAE,IAAAC,oBAAa,EAACtB,SAAS,CAAC;IAC5BuB,GAAG,EAAGA,GAAsB,IAAK;MAC/BnB,SAAS,CAACM,OAAO,GAAGa,GAAG;MACvB,IAAIA,GAAG,EAAE;QACPnC,YAAY,CAACmC,GAAG,CAAC;MACnB;IACF;EACF,CAAC,CAAC;AACJ;AAEA,MAAMN,MAAM,GAAGO,uBAAU,CAACC,MAAM,CAAC;EAC/BN,KAAK,EAAE;IACLO,IAAI,EAAE;EACR,CAAC;EACDR,IAAI,EAAE;IACJS,UAAU,EAAE,SAAS;IACrBP,eAAe,EAAE,aAAa;IAC9B;IACAQ,MAAM,EAAE,eAAe;IACvBC,SAAS,EAAE,YAAY;IACvBC,OAAO,EAAE,MAAM;IACfC,SAAS,EAAE,MAAM;IACjBC,aAAa,EAAE,QAAQ;IACvBC,UAAU,EAAE,CAAC;IACbC,SAAS,EAAE,MAAM;IACjBC,MAAM,EAAE,CAAC;IACTC,SAAS,EAAE,CAAC;IACZC,QAAQ,EAAE,CAAC;IACXC,OAAO,EAAE,CAAC;IACVC,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE;EACV;AACF,CAAC,CAAC","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/commonjs/WebPolyfillGPUModule.js b/node_modules/react-native-wgpu/lib/commonjs/WebPolyfillGPUModule.js
new file mode 100644
index 0000000..574c0bc
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/commonjs/WebPolyfillGPUModule.js
@@ -0,0 +1,37 @@
+"use strict";
+
+var _utils = require("./utils");
+const fabric = true;
+function getNativeSurface(contextId) {
+  const canvas = document.getElementById((0, _utils.contextIdToId)(contextId));
+  const {
+    height,
+    width
+  } = canvas.getBoundingClientRect();
+  return {
+    surface: BigInt(contextId),
+    height,
+    width,
+    clientHeight: height,
+    clientWidth: width
+  };
+}
+function makeWebGPUCanvasContext(contextId, width, height) {
+  const canvas = document.getElementById((0, _utils.contextIdToId)(contextId));
+  if (canvas.getAttribute("width") !== width.toString() || canvas.getAttribute("height") !== height.toString()) {
+    canvas.setAttribute("width", width.toString());
+    canvas.setAttribute("height", height.toString());
+  }
+  const context = canvas.getContext("webgpu");
+  return Object.assign(context, {
+    present: () => {}
+  });
+}
+
+// @ts-expect-error - polyfill for RNWebGPU native module
+window.RNWebGPU = {
+  getNativeSurface,
+  MakeWebGPUCanvasContext: makeWebGPUCanvasContext,
+  fabric
+};
+//# sourceMappingURL=WebPolyfillGPUModule.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/commonjs/WebPolyfillGPUModule.js.map b/node_modules/react-native-wgpu/lib/commonjs/WebPolyfillGPUModule.js.map
new file mode 100644
index 0000000..5e0b74f
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/commonjs/WebPolyfillGPUModule.js.map
@@ -0,0 +1 @@
+{"version":3,"names":["_utils","require","fabric","getNativeSurface","contextId","canvas","document","getElementById","contextIdToId","height","width","getBoundingClientRect","surface","BigInt","clientHeight","clientWidth","makeWebGPUCanvasContext","getAttribute","toString","setAttribute","context","getContext","Object","assign","present","window","RNWebGPU","MakeWebGPUCanvasContext"],"sourceRoot":"../../src","sources":["WebPolyfillGPUModule.ts"],"mappings":";;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,MAAMC,MAAM,GAAG,IAAI;AAEnB,SAASC,gBAAgBA,CAACC,SAAiB,EAAE;EAC3C,MAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAc,CACpC,IAAAC,oBAAa,EAACJ,SAAS,CACzB,CAAsB;EAEtB,MAAM;IAAEK,MAAM;IAAEC;EAAM,CAAC,GAAGL,MAAM,CAACM,qBAAqB,CAAC,CAAE;EAEzD,OAAO;IACLC,OAAO,EAAEC,MAAM,CAACT,SAAS,CAAC;IAC1BK,MAAM;IACNC,KAAK;IACLI,YAAY,EAAEL,MAAM;IACpBM,WAAW,EAAEL;EACf,CAAC;AACH;AAEA,SAASM,uBAAuBA,CAC9BZ,SAAiB,EACjBM,KAAa,EACbD,MAAc,EACd;EACA,MAAMJ,MAAM,GAAGC,QAAQ,CAACC,cAAc,CACpC,IAAAC,oBAAa,EAACJ,SAAS,CACzB,CAAsB;EAEtB,IACEC,MAAM,CAACY,YAAY,CAAC,OAAO,CAAC,KAAKP,KAAK,CAACQ,QAAQ,CAAC,CAAC,IACjDb,MAAM,CAACY,YAAY,CAAC,QAAQ,CAAC,KAAKR,MAAM,CAACS,QAAQ,CAAC,CAAC,EACnD;IACAb,MAAM,CAACc,YAAY,CAAC,OAAO,EAAET,KAAK,CAACQ,QAAQ,CAAC,CAAC,CAAC;IAC9Cb,MAAM,CAACc,YAAY,CAAC,QAAQ,EAAEV,MAAM,CAACS,QAAQ,CAAC,CAAC,CAAC;EAClD;EAEA,MAAME,OAAO,GAAGf,MAAM,CAACgB,UAAU,CAAC,QAAQ,CAAE;EAE5C,OAAOC,MAAM,CAACC,MAAM,CAACH,OAAO,EAAE;IAC5BI,OAAO,EAAEA,CAAA,KAAM,CAAC;EAClB,CAAC,CAAC;AACJ;;AAEA;AACAC,MAAM,CAACC,QAAQ,GAAG;EAChBvB,gBAAgB;EAChBwB,uBAAuB,EAAEX,uBAAuB;EAChDd;AACF,CAAC","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/commonjs/index.js b/node_modules/react-native-wgpu/lib/commonjs/index.js
index 123f9c4..e0a1583 100644
--- a/node_modules/react-native-wgpu/lib/commonjs/index.js
+++ b/node_modules/react-native-wgpu/lib/commonjs/index.js
@@ -3,219 +3,15 @@
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
-var _exportNames = {
-  WebGPUModule: true
-};
-Object.defineProperty(exports, "WebGPUModule", {
-  enumerable: true,
-  get: function () {
-    return _NativeWebGPUModule.default;
-  }
-});
-var _NativeWebGPUModule = _interopRequireDefault(require("./NativeWebGPUModule"));
-var _Canvas = require("./Canvas");
-Object.keys(_Canvas).forEach(function (key) {
-  if (key === "default" || key === "__esModule") return;
-  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
-  if (key in exports && exports[key] === _Canvas[key]) return;
-  Object.defineProperty(exports, key, {
-    enumerable: true,
-    get: function () {
-      return _Canvas[key];
-    }
-  });
-});
-var _Offscreen = require("./Offscreen");
-Object.keys(_Offscreen).forEach(function (key) {
-  if (key === "default" || key === "__esModule") return;
-  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
-  if (key in exports && exports[key] === _Offscreen[key]) return;
-  Object.defineProperty(exports, key, {
-    enumerable: true,
-    get: function () {
-      return _Offscreen[key];
-    }
-  });
-});
-var _WebGPUViewNativeComponent = require("./WebGPUViewNativeComponent");
-Object.keys(_WebGPUViewNativeComponent).forEach(function (key) {
-  if (key === "default" || key === "__esModule") return;
-  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
-  if (key in exports && exports[key] === _WebGPUViewNativeComponent[key]) return;
-  Object.defineProperty(exports, key, {
-    enumerable: true,
-    get: function () {
-      return _WebGPUViewNativeComponent[key];
-    }
-  });
-});
-var _hooks = require("./hooks");
-Object.keys(_hooks).forEach(function (key) {
+var _main = require("./main");
+Object.keys(_main).forEach(function (key) {
   if (key === "default" || key === "__esModule") return;
-  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
-  if (key in exports && exports[key] === _hooks[key]) return;
+  if (key in exports && exports[key] === _main[key]) return;
   Object.defineProperty(exports, key, {
     enumerable: true,
     get: function () {
-      return _hooks[key];
+      return _main[key];
     }
   });
 });
-function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
-/* eslint-disable @typescript-eslint/no-explicit-any */
-
-const GPU = {};
-GPU[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPU";
-};
-const GPUAdapter = {};
-GPUAdapter[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUAdapter";
-};
-const GPUAdapterInfo = {};
-GPUAdapterInfo[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUAdapterInfo";
-};
-const GPUBindGroup = {};
-GPUBindGroup[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUBindGroup";
-};
-const GPUBindGroupLayout = {};
-GPUBindGroupLayout[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUBindGroupLayout";
-};
-const GPUBuffer = {};
-GPUBuffer[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUBuffer";
-};
-const GPUCanvasContext = {};
-GPUCanvasContext[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUCanvasContext";
-};
-const GPUCommandBuffer = {};
-GPUCommandBuffer[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUCommandBuffer";
-};
-const GPUCommandEncoder = {};
-GPUCommandEncoder[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUCommandEncoder";
-};
-const GPUCompilationInfo = {};
-GPUCompilationInfo[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUCompilationInfo";
-};
-const GPUCompilationMessage = {};
-GPUCompilationMessage[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUCompilationMessage";
-};
-const GPUComputePassEncoder = {};
-GPUComputePassEncoder[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUComputePassEncoder";
-};
-const GPUComputePipeline = {};
-GPUComputePipeline[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUComputePipeline";
-};
-const GPUDevice = {};
-GPUDevice[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUDevice";
-};
-const GPUDeviceLostInfo = {};
-GPUDeviceLostInfo[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUDeviceLostInfo";
-};
-const GPUError = {};
-GPUError[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUError";
-};
-const GPUExternalTexture = {};
-GPUExternalTexture[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUExternalTexture";
-};
-const GPUPipelineLayout = {};
-GPUPipelineLayout[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUPipelineLayout";
-};
-const GPUQuerySet = {};
-GPUQuerySet[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUQuerySet";
-};
-const GPUQueue = {};
-GPUQueue[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUQueue";
-};
-const GPURenderBundle = {};
-GPURenderBundle[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPURenderBundle";
-};
-const GPURenderBundleEncoder = {};
-GPURenderBundleEncoder[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPURenderBundleEncoder";
-};
-const GPURenderPassEncoder = {};
-GPURenderPassEncoder[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPURenderPassEncoder";
-};
-const GPURenderPipeline = {};
-GPURenderPipeline[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPURenderPipeline";
-};
-const GPUSampler = {};
-GPUSampler[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUSampler";
-};
-const GPUShaderModule = {};
-GPUShaderModule[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUShaderModule";
-};
-const GPUTexture = {};
-GPUTexture[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUTexture";
-};
-const GPUTextureView = {};
-GPUTextureView[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUTextureView";
-};
-global.GPU = GPU;
-global.GPUAdapter = GPUAdapter;
-global.GPUAdapterInfo = GPUAdapterInfo;
-global.GPUBindGroup = GPUBindGroup;
-global.GPUBindGroupLayout = GPUBindGroupLayout;
-global.GPUBuffer = GPUBuffer;
-global.GPUCanvasContext = GPUCanvasContext;
-global.GPUCommandBuffer = GPUCommandBuffer;
-global.GPUCommandEncoder = GPUCommandEncoder;
-global.GPUCompilationInfo = GPUCompilationInfo;
-global.GPUCompilationMessage = GPUCompilationMessage;
-global.GPUComputePassEncoder = GPUComputePassEncoder;
-global.GPUComputePipeline = GPUComputePipeline;
-global.GPUDevice = GPUDevice;
-global.GPUDeviceLostInfo = GPUDeviceLostInfo;
-global.GPUError = GPUError;
-global.GPUExternalTexture = GPUExternalTexture;
-global.GPUPipelineLayout = GPUPipelineLayout;
-global.GPUQuerySet = GPUQuerySet;
-global.GPUQueue = GPUQueue;
-global.GPURenderBundle = GPURenderBundle;
-global.GPURenderBundleEncoder = GPURenderBundleEncoder;
-global.GPURenderPassEncoder = GPURenderPassEncoder;
-global.GPURenderPipeline = GPURenderPipeline;
-global.GPUSampler = GPUSampler;
-global.GPUShaderModule = GPUShaderModule;
-global.GPUTexture = GPUTexture;
-global.GPUTextureView = GPUTextureView;
-_NativeWebGPUModule.default.install();
-if (!navigator) {
-  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
-  // @ts-expect-error
-  navigator = {};
-}
-// eslint-disable-next-line @typescript-eslint/ban-ts-comment
-// @ts-expect-error
-navigator.gpu = RNWebGPU.gpu;
-
-// eslint-disable-next-line @typescript-eslint/ban-ts-comment
-// @ts-ignore
-navigator.userAgent = "react-native";
-global.createImageBitmap = global.createImageBitmap ?? ((...params) => new Promise(resolve => resolve(RNWebGPU.createImageBitmap(...params))));
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/commonjs/index.js.map b/node_modules/react-native-wgpu/lib/commonjs/index.js.map
index 217fd22..b8356ce 100644
--- a/node_modules/react-native-wgpu/lib/commonjs/index.js.map
+++ b/node_modules/react-native-wgpu/lib/commonjs/index.js.map
@@ -1 +1 @@
-{"version":3,"names":["_NativeWebGPUModule","_interopRequireDefault","require","_Canvas","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_Offscreen","_WebGPUViewNativeComponent","_hooks","e","__esModule","default","GPU","Symbol","hasInstance","instance","__brand","GPUAdapter","GPUAdapterInfo","GPUBindGroup","GPUBindGroupLayout","GPUBuffer","GPUCanvasContext","GPUCommandBuffer","GPUCommandEncoder","GPUCompilationInfo","GPUCompilationMessage","GPUComputePassEncoder","GPUComputePipeline","GPUDevice","GPUDeviceLostInfo","GPUError","GPUExternalTexture","GPUPipelineLayout","GPUQuerySet","GPUQueue","GPURenderBundle","GPURenderBundleEncoder","GPURenderPassEncoder","GPURenderPipeline","GPUSampler","GPUShaderModule","GPUTexture","GPUTextureView","global","WebGPUNativeModule","install","navigator","gpu","RNWebGPU","userAgent","createImageBitmap","params","Promise","resolve"],"sourceRoot":"../../src","sources":["index.tsx"],"mappings":";;;;;;;;;;;;;;AACA,IAAAA,mBAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,OAAA,GAAAD,OAAA;AAAAE,MAAA,CAAAC,IAAA,CAAAF,OAAA,EAAAG,OAAA,WAAAC,GAAA;EAAA,IAAAA,GAAA,kBAAAA,GAAA;EAAA,IAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAC,YAAA,EAAAJ,GAAA;EAAA,IAAAA,GAAA,IAAAK,OAAA,IAAAA,OAAA,CAAAL,GAAA,MAAAJ,OAAA,CAAAI,GAAA;EAAAH,MAAA,CAAAS,cAAA,CAAAD,OAAA,EAAAL,GAAA;IAAAO,UAAA;IAAAC,GAAA,WAAAA,CAAA;MAAA,OAAAZ,OAAA,CAAAI,GAAA;IAAA;EAAA;AAAA;AACA,IAAAS,UAAA,GAAAd,OAAA;AAAAE,MAAA,CAAAC,IAAA,CAAAW,UAAA,EAAAV,OAAA,WAAAC,GAAA;EAAA,IAAAA,GAAA,kBAAAA,GAAA;EAAA,IAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAC,YAAA,EAAAJ,GAAA;EAAA,IAAAA,GAAA,IAAAK,OAAA,IAAAA,OAAA,CAAAL,GAAA,MAAAS,UAAA,CAAAT,GAAA;EAAAH,MAAA,CAAAS,cAAA,CAAAD,OAAA,EAAAL,GAAA;IAAAO,UAAA;IAAAC,GAAA,WAAAA,CAAA;MAAA,OAAAC,UAAA,CAAAT,GAAA;IAAA;EAAA;AAAA;AACA,IAAAU,0BAAA,GAAAf,OAAA;AAAAE,MAAA,CAAAC,IAAA,CAAAY,0BAAA,EAAAX,OAAA,WAAAC,GAAA;EAAA,IAAAA,GAAA,kBAAAA,GAAA;EAAA,IAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAC,YAAA,EAAAJ,GAAA;EAAA,IAAAA,GAAA,IAAAK,OAAA,IAAAA,OAAA,CAAAL,GAAA,MAAAU,0BAAA,CAAAV,GAAA;EAAAH,MAAA,CAAAS,cAAA,CAAAD,OAAA,EAAAL,GAAA;IAAAO,UAAA;IAAAC,GAAA,WAAAA,CAAA;MAAA,OAAAE,0BAAA,CAAAV,GAAA;IAAA;EAAA;AAAA;AACA,IAAAW,MAAA,GAAAhB,OAAA;AAAAE,MAAA,CAAAC,IAAA,CAAAa,MAAA,EAAAZ,OAAA,WAAAC,GAAA;EAAA,IAAAA,GAAA,kBAAAA,GAAA;EAAA,IAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAC,YAAA,EAAAJ,GAAA;EAAA,IAAAA,GAAA,IAAAK,OAAA,IAAAA,OAAA,CAAAL,GAAA,MAAAW,MAAA,CAAAX,GAAA;EAAAH,MAAA,CAAAS,cAAA,CAAAD,OAAA,EAAAL,GAAA;IAAAO,UAAA;IAAAC,GAAA,WAAAA,CAAA;MAAA,OAAAG,MAAA,CAAAX,GAAA;IAAA;EAAA;AAAA;AAAwB,SAAAN,uBAAAkB,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AANxB;;AASA,MAAMG,GAAQ,GAAG,CAAC,CAAC;AACnBA,GAAG,CAACC,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EACpD,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,KAAK;AAC5D,CAAC;AAED,MAAMC,UAAe,GAAG,CAAC,CAAC;AAC1BA,UAAU,CAACJ,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAC3D,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,YAAY;AACnE,CAAC;AAED,MAAME,cAAmB,GAAG,CAAC,CAAC;AAC9BA,cAAc,CAACL,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAC/D,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,gBAAgB;AACvE,CAAC;AAED,MAAMG,YAAiB,GAAG,CAAC,CAAC;AAC5BA,YAAY,CAACN,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAC7D,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,cAAc;AACrE,CAAC;AAED,MAAMI,kBAAuB,GAAG,CAAC,CAAC;AAClCA,kBAAkB,CAACP,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EACnE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,oBAAoB;AAC3E,CAAC;AAED,MAAMK,SAAc,GAAG,CAAC,CAAC;AACzBA,SAAS,CAACR,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAC1D,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,WAAW;AAClE,CAAC;AAED,MAAMM,gBAAqB,GAAG,CAAC,CAAC;AAChCA,gBAAgB,CAACT,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EACjE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,kBAAkB;AACzE,CAAC;AAED,MAAMO,gBAAqB,GAAG,CAAC,CAAC;AAChCA,gBAAgB,CAACV,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EACjE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,kBAAkB;AACzE,CAAC;AAED,MAAMQ,iBAAsB,GAAG,CAAC,CAAC;AACjCA,iBAAiB,CAACX,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAClE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,mBAAmB;AAC1E,CAAC;AAED,MAAMS,kBAAuB,GAAG,CAAC,CAAC;AAClCA,kBAAkB,CAACZ,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EACnE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,oBAAoB;AAC3E,CAAC;AAED,MAAMU,qBAA0B,GAAG,CAAC,CAAC;AACrCA,qBAAqB,CAACb,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EACtE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,uBAAuB;AAC9E,CAAC;AAED,MAAMW,qBAA0B,GAAG,CAAC,CAAC;AACrCA,qBAAqB,CAACd,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EACtE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,uBAAuB;AAC9E,CAAC;AAED,MAAMY,kBAAuB,GAAG,CAAC,CAAC;AAClCA,kBAAkB,CAACf,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EACnE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,oBAAoB;AAC3E,CAAC;AAED,MAAMa,SAAc,GAAG,CAAC,CAAC;AACzBA,SAAS,CAAChB,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAC1D,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,WAAW;AAClE,CAAC;AAED,MAAMc,iBAAsB,GAAG,CAAC,CAAC;AACjCA,iBAAiB,CAACjB,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAClE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,mBAAmB;AAC1E,CAAC;AAED,MAAMe,QAAa,GAAG,CAAC,CAAC;AACxBA,QAAQ,CAAClB,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EACzD,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,UAAU;AACjE,CAAC;AAED,MAAMgB,kBAAuB,GAAG,CAAC,CAAC;AAClCA,kBAAkB,CAACnB,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EACnE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,oBAAoB;AAC3E,CAAC;AAED,MAAMiB,iBAAsB,GAAG,CAAC,CAAC;AACjCA,iBAAiB,CAACpB,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAClE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,mBAAmB;AAC1E,CAAC;AAED,MAAMkB,WAAgB,GAAG,CAAC,CAAC;AAC3BA,WAAW,CAACrB,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAC5D,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,aAAa;AACpE,CAAC;AAED,MAAMmB,QAAa,GAAG,CAAC,CAAC;AACxBA,QAAQ,CAACtB,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EACzD,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,UAAU;AACjE,CAAC;AAED,MAAMoB,eAAoB,GAAG,CAAC,CAAC;AAC/BA,eAAe,CAACvB,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAChE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,iBAAiB;AACxE,CAAC;AAED,MAAMqB,sBAA2B,GAAG,CAAC,CAAC;AACtCA,sBAAsB,CAACxB,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EACvE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,wBAAwB;AAC/E,CAAC;AAED,MAAMsB,oBAAyB,GAAG,CAAC,CAAC;AACpCA,oBAAoB,CAACzB,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EACrE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,sBAAsB;AAC7E,CAAC;AAED,MAAMuB,iBAAsB,GAAG,CAAC,CAAC;AACjCA,iBAAiB,CAAC1B,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAClE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,mBAAmB;AAC1E,CAAC;AAED,MAAMwB,UAAe,GAAG,CAAC,CAAC;AAC1BA,UAAU,CAAC3B,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAC3D,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,YAAY;AACnE,CAAC;AAED,MAAMyB,eAAoB,GAAG,CAAC,CAAC;AAC/BA,eAAe,CAAC5B,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAChE,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,iBAAiB;AACxE,CAAC;AAED,MAAM0B,UAAe,GAAG,CAAC,CAAC;AAC1BA,UAAU,CAAC7B,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAC3D,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,YAAY;AACnE,CAAC;AAED,MAAM2B,cAAmB,GAAG,CAAC,CAAC;AAC9BA,cAAc,CAAC9B,MAAM,CAACC,WAAW,CAAC,GAAG,UAAUC,QAAgB,EAAE;EAC/D,OAAO,SAAS,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,KAAK,gBAAgB;AACvE,CAAC;AAED4B,MAAM,CAAChC,GAAG,GAAGA,GAAG;AAChBgC,MAAM,CAAC3B,UAAU,GAAGA,UAAU;AAC9B2B,MAAM,CAAC1B,cAAc,GAAGA,cAAc;AACtC0B,MAAM,CAACzB,YAAY,GAAGA,YAAY;AAClCyB,MAAM,CAACxB,kBAAkB,GAAGA,kBAAkB;AAC9CwB,MAAM,CAACvB,SAAS,GAAGA,SAAS;AAC5BuB,MAAM,CAACtB,gBAAgB,GAAGA,gBAAgB;AAC1CsB,MAAM,CAACrB,gBAAgB,GAAGA,gBAAgB;AAC1CqB,MAAM,CAACpB,iBAAiB,GAAGA,iBAAiB;AAC5CoB,MAAM,CAACnB,kBAAkB,GAAGA,kBAAkB;AAC9CmB,MAAM,CAAClB,qBAAqB,GAAGA,qBAAqB;AACpDkB,MAAM,CAACjB,qBAAqB,GAAGA,qBAAqB;AACpDiB,MAAM,CAAChB,kBAAkB,GAAGA,kBAAkB;AAC9CgB,MAAM,CAACf,SAAS,GAAGA,SAAS;AAC5Be,MAAM,CAACd,iBAAiB,GAAGA,iBAAiB;AAC5Cc,MAAM,CAACb,QAAQ,GAAGA,QAAQ;AAC1Ba,MAAM,CAACZ,kBAAkB,GAAGA,kBAAkB;AAC9CY,MAAM,CAACX,iBAAiB,GAAGA,iBAAiB;AAC5CW,MAAM,CAACV,WAAW,GAAGA,WAAW;AAChCU,MAAM,CAACT,QAAQ,GAAGA,QAAQ;AAC1BS,MAAM,CAACR,eAAe,GAAGA,eAAe;AACxCQ,MAAM,CAACP,sBAAsB,GAAGA,sBAAsB;AACtDO,MAAM,CAACN,oBAAoB,GAAGA,oBAAoB;AAClDM,MAAM,CAACL,iBAAiB,GAAGA,iBAAiB;AAC5CK,MAAM,CAACJ,UAAU,GAAGA,UAAU;AAC9BI,MAAM,CAACH,eAAe,GAAGA,eAAe;AACxCG,MAAM,CAACF,UAAU,GAAGA,UAAU;AAC9BE,MAAM,CAACD,cAAc,GAAGA,cAAc;AAEtCE,2BAAkB,CAACC,OAAO,CAAC,CAAC;AAE5B,IAAI,CAACC,SAAS,EAAE;EACd;EACA;EACAA,SAAS,GAAG,CAAC,CAAC;AAChB;AACA;AACA;AACAA,SAAS,CAACC,GAAG,GAAGC,QAAQ,CAACD,GAAG;;AAE5B;AACA;AACAD,SAAS,CAACG,SAAS,GAAG,cAAc;AAEpCN,MAAM,CAACO,iBAAiB,GACtBP,MAAM,CAACO,iBAAiB,KACvB,CAAC,GAAGC,MAA4C,KAC/C,IAAIC,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAACL,QAAQ,CAACE,iBAAiB,CAAC,GAAGC,MAAM,CAAC,CAAC,CAAC,CAAC","ignoreList":[]}
+{"version":3,"names":["_main","require","Object","keys","forEach","key","exports","defineProperty","enumerable","get"],"sourceRoot":"../../src","sources":["index.tsx"],"mappings":";;;;;AAIA,IAAAA,KAAA,GAAAC,OAAA;AAAAC,MAAA,CAAAC,IAAA,CAAAH,KAAA,EAAAI,OAAA,WAAAC,GAAA;EAAA,IAAAA,GAAA,kBAAAA,GAAA;EAAA,IAAAA,GAAA,IAAAC,OAAA,IAAAA,OAAA,CAAAD,GAAA,MAAAL,KAAA,CAAAK,GAAA;EAAAH,MAAA,CAAAK,cAAA,CAAAD,OAAA,EAAAD,GAAA;IAAAG,UAAA;IAAAC,GAAA,WAAAA,CAAA;MAAA,OAAAT,KAAA,CAAAK,GAAA;IAAA;EAAA;AAAA","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/commonjs/main/index.js b/node_modules/react-native-wgpu/lib/commonjs/main/index.js
new file mode 100644
index 0000000..cbb17a5
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/commonjs/main/index.js
@@ -0,0 +1,229 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+var _exportNames = {
+  WebGPUModule: true
+};
+Object.defineProperty(exports, "WebGPUModule", {
+  enumerable: true,
+  get: function () {
+    return _NativeWebGPUModule.default;
+  }
+});
+var _NativeWebGPUModule = _interopRequireDefault(require("../NativeWebGPUModule"));
+var _Canvas = require("../Canvas");
+Object.keys(_Canvas).forEach(function (key) {
+  if (key === "default" || key === "__esModule") return;
+  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
+  if (key in exports && exports[key] === _Canvas[key]) return;
+  Object.defineProperty(exports, key, {
+    enumerable: true,
+    get: function () {
+      return _Canvas[key];
+    }
+  });
+});
+var _Offscreen = require("../Offscreen");
+Object.keys(_Offscreen).forEach(function (key) {
+  if (key === "default" || key === "__esModule") return;
+  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
+  if (key in exports && exports[key] === _Offscreen[key]) return;
+  Object.defineProperty(exports, key, {
+    enumerable: true,
+    get: function () {
+      return _Offscreen[key];
+    }
+  });
+});
+var _WebGPUViewNativeComponent = require("../WebGPUViewNativeComponent");
+Object.keys(_WebGPUViewNativeComponent).forEach(function (key) {
+  if (key === "default" || key === "__esModule") return;
+  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
+  if (key in exports && exports[key] === _WebGPUViewNativeComponent[key]) return;
+  Object.defineProperty(exports, key, {
+    enumerable: true,
+    get: function () {
+      return _WebGPUViewNativeComponent[key];
+    }
+  });
+});
+var _hooks = require("../hooks");
+Object.keys(_hooks).forEach(function (key) {
+  if (key === "default" || key === "__esModule") return;
+  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
+  if (key in exports && exports[key] === _hooks[key]) return;
+  Object.defineProperty(exports, key, {
+    enumerable: true,
+    get: function () {
+      return _hooks[key];
+    }
+  });
+});
+var _types = require("../types");
+Object.keys(_types).forEach(function (key) {
+  if (key === "default" || key === "__esModule") return;
+  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
+  if (key in exports && exports[key] === _types[key]) return;
+  Object.defineProperty(exports, key, {
+    enumerable: true,
+    get: function () {
+      return _types[key];
+    }
+  });
+});
+function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
+/* eslint-disable @typescript-eslint/no-explicit-any */
+
+const GPU = {};
+GPU[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPU";
+};
+const GPUAdapter = {};
+GPUAdapter[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUAdapter";
+};
+const GPUAdapterInfo = {};
+GPUAdapterInfo[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUAdapterInfo";
+};
+const GPUBindGroup = {};
+GPUBindGroup[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUBindGroup";
+};
+const GPUBindGroupLayout = {};
+GPUBindGroupLayout[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUBindGroupLayout";
+};
+const GPUBuffer = {};
+GPUBuffer[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUBuffer";
+};
+const GPUCanvasContext = {};
+GPUCanvasContext[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUCanvasContext";
+};
+const GPUCommandBuffer = {};
+GPUCommandBuffer[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUCommandBuffer";
+};
+const GPUCommandEncoder = {};
+GPUCommandEncoder[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUCommandEncoder";
+};
+const GPUCompilationInfo = {};
+GPUCompilationInfo[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUCompilationInfo";
+};
+const GPUCompilationMessage = {};
+GPUCompilationMessage[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUCompilationMessage";
+};
+const GPUComputePassEncoder = {};
+GPUComputePassEncoder[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUComputePassEncoder";
+};
+const GPUComputePipeline = {};
+GPUComputePipeline[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUComputePipeline";
+};
+const GPUDevice = {};
+GPUDevice[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUDevice";
+};
+const GPUDeviceLostInfo = {};
+GPUDeviceLostInfo[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUDeviceLostInfo";
+};
+const GPUError = {};
+GPUError[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUError";
+};
+const GPUExternalTexture = {};
+GPUExternalTexture[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUExternalTexture";
+};
+const GPUPipelineLayout = {};
+GPUPipelineLayout[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUPipelineLayout";
+};
+const GPUQuerySet = {};
+GPUQuerySet[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUQuerySet";
+};
+const GPUQueue = {};
+GPUQueue[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUQueue";
+};
+const GPURenderBundle = {};
+GPURenderBundle[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPURenderBundle";
+};
+const GPURenderBundleEncoder = {};
+GPURenderBundleEncoder[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPURenderBundleEncoder";
+};
+const GPURenderPassEncoder = {};
+GPURenderPassEncoder[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPURenderPassEncoder";
+};
+const GPURenderPipeline = {};
+GPURenderPipeline[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPURenderPipeline";
+};
+const GPUSampler = {};
+GPUSampler[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUSampler";
+};
+const GPUShaderModule = {};
+GPUShaderModule[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUShaderModule";
+};
+const GPUTexture = {};
+GPUTexture[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUTexture";
+};
+const GPUTextureView = {};
+GPUTextureView[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUTextureView";
+};
+global.GPU = GPU;
+global.GPUAdapter = GPUAdapter;
+global.GPUAdapterInfo = GPUAdapterInfo;
+global.GPUBindGroup = GPUBindGroup;
+global.GPUBindGroupLayout = GPUBindGroupLayout;
+global.GPUBuffer = GPUBuffer;
+global.GPUCanvasContext = GPUCanvasContext;
+global.GPUCommandBuffer = GPUCommandBuffer;
+global.GPUCommandEncoder = GPUCommandEncoder;
+global.GPUCompilationInfo = GPUCompilationInfo;
+global.GPUCompilationMessage = GPUCompilationMessage;
+global.GPUComputePassEncoder = GPUComputePassEncoder;
+global.GPUComputePipeline = GPUComputePipeline;
+global.GPUDevice = GPUDevice;
+global.GPUDeviceLostInfo = GPUDeviceLostInfo;
+global.GPUError = GPUError;
+global.GPUExternalTexture = GPUExternalTexture;
+global.GPUPipelineLayout = GPUPipelineLayout;
+global.GPUQuerySet = GPUQuerySet;
+global.GPUQueue = GPUQueue;
+global.GPURenderBundle = GPURenderBundle;
+global.GPURenderBundleEncoder = GPURenderBundleEncoder;
+global.GPURenderPassEncoder = GPURenderPassEncoder;
+global.GPURenderPipeline = GPURenderPipeline;
+global.GPUSampler = GPUSampler;
+global.GPUShaderModule = GPUShaderModule;
+global.GPUTexture = GPUTexture;
+global.GPUTextureView = GPUTextureView;
+_NativeWebGPUModule.default.install();
+if (!navigator) {
+  // @ts-expect-error Navigation object is more complex than this, setting it to an empty object to add gpu property
+  navigator = {};
+}
+navigator.gpu = RNWebGPU.gpu;
+
+// @ts-expect-error: set a fake userAgent so code expecting it doesn’t break
+navigator.userAgent = "react-native";
+global.createImageBitmap = global.createImageBitmap ?? ((...params) => new Promise(resolve => resolve(RNWebGPU.createImageBitmap(...params))));
+//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/commonjs/main/index.js.map b/node_modules/react-native-wgpu/lib/commonjs/main/index.js.map
new file mode 100644
index 0000000..a306fd8
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/commonjs/main/index.js.map
@@ -0,0 +1 @@
+{"version":3,"names":["_NativeWebGPUModule","_interopRequireDefault","require","_Canvas","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_Offscreen","_WebGPUViewNativeComponent","_hooks","_types","e","__esModule","default","GPU","Symbol","hasInstance","instance","__brand","GPUAdapter","GPUAdapterInfo","GPUBindGroup","GPUBindGroupLayout","GPUBuffer","GPUCanvasContext","GPUCommandBuffer","GPUCommandEncoder","GPUCompilationInfo","GPUCompilationMessage","GPUComputePassEncoder","GPUComputePipeline","GPUDevice","GPUDeviceLostInfo","GPUError","GPUExternalTexture","GPUPipelineLayout","GPUQuerySet","GPUQueue","GPURenderBundle","GPURenderBundleEncoder","GPURenderPassEncoder","GPURenderPipeline","GPUSampler","GPUShaderModule","GPUTexture","GPUTextureView","global","WebGPUModule","install","navigator","gpu","RNWebGPU","userAgent","createImageBitmap","params","Promise","resolve"],"sourceRoot":"../../../src","sources":["main/index.tsx"],"mappings":"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","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/commonjs/main/index.web.js b/node_modules/react-native-wgpu/lib/commonjs/main/index.web.js
new file mode 100644
index 0000000..134fe28
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/commonjs/main/index.web.js
@@ -0,0 +1,62 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+require("../WebPolyfillGPUModule");
+var _Canvas = require("../Canvas");
+Object.keys(_Canvas).forEach(function (key) {
+  if (key === "default" || key === "__esModule") return;
+  if (key in exports && exports[key] === _Canvas[key]) return;
+  Object.defineProperty(exports, key, {
+    enumerable: true,
+    get: function () {
+      return _Canvas[key];
+    }
+  });
+});
+var _Offscreen = require("../Offscreen");
+Object.keys(_Offscreen).forEach(function (key) {
+  if (key === "default" || key === "__esModule") return;
+  if (key in exports && exports[key] === _Offscreen[key]) return;
+  Object.defineProperty(exports, key, {
+    enumerable: true,
+    get: function () {
+      return _Offscreen[key];
+    }
+  });
+});
+var _WebGPUViewNativeComponent = require("../WebGPUViewNativeComponent");
+Object.keys(_WebGPUViewNativeComponent).forEach(function (key) {
+  if (key === "default" || key === "__esModule") return;
+  if (key in exports && exports[key] === _WebGPUViewNativeComponent[key]) return;
+  Object.defineProperty(exports, key, {
+    enumerable: true,
+    get: function () {
+      return _WebGPUViewNativeComponent[key];
+    }
+  });
+});
+var _hooks = require("../hooks");
+Object.keys(_hooks).forEach(function (key) {
+  if (key === "default" || key === "__esModule") return;
+  if (key in exports && exports[key] === _hooks[key]) return;
+  Object.defineProperty(exports, key, {
+    enumerable: true,
+    get: function () {
+      return _hooks[key];
+    }
+  });
+});
+var _types = require("../types");
+Object.keys(_types).forEach(function (key) {
+  if (key === "default" || key === "__esModule") return;
+  if (key in exports && exports[key] === _types[key]) return;
+  Object.defineProperty(exports, key, {
+    enumerable: true,
+    get: function () {
+      return _types[key];
+    }
+  });
+});
+//# sourceMappingURL=index.web.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/commonjs/main/index.web.js.map b/node_modules/react-native-wgpu/lib/commonjs/main/index.web.js.map
new file mode 100644
index 0000000..0586a19
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/commonjs/main/index.web.js.map
@@ -0,0 +1 @@
+{"version":3,"names":["require","_Canvas","Object","keys","forEach","key","exports","defineProperty","enumerable","get","_Offscreen","_WebGPUViewNativeComponent","_hooks","_types"],"sourceRoot":"../../../src","sources":["main/index.web.tsx"],"mappings":";;;;;AAAAA,OAAA;AAEA,IAAAC,OAAA,GAAAD,OAAA;AAAAE,MAAA,CAAAC,IAAA,CAAAF,OAAA,EAAAG,OAAA,WAAAC,GAAA;EAAA,IAAAA,GAAA,kBAAAA,GAAA;EAAA,IAAAA,GAAA,IAAAC,OAAA,IAAAA,OAAA,CAAAD,GAAA,MAAAJ,OAAA,CAAAI,GAAA;EAAAH,MAAA,CAAAK,cAAA,CAAAD,OAAA,EAAAD,GAAA;IAAAG,UAAA;IAAAC,GAAA,WAAAA,CAAA;MAAA,OAAAR,OAAA,CAAAI,GAAA;IAAA;EAAA;AAAA;AACA,IAAAK,UAAA,GAAAV,OAAA;AAAAE,MAAA,CAAAC,IAAA,CAAAO,UAAA,EAAAN,OAAA,WAAAC,GAAA;EAAA,IAAAA,GAAA,kBAAAA,GAAA;EAAA,IAAAA,GAAA,IAAAC,OAAA,IAAAA,OAAA,CAAAD,GAAA,MAAAK,UAAA,CAAAL,GAAA;EAAAH,MAAA,CAAAK,cAAA,CAAAD,OAAA,EAAAD,GAAA;IAAAG,UAAA;IAAAC,GAAA,WAAAA,CAAA;MAAA,OAAAC,UAAA,CAAAL,GAAA;IAAA;EAAA;AAAA;AACA,IAAAM,0BAAA,GAAAX,OAAA;AAAAE,MAAA,CAAAC,IAAA,CAAAQ,0BAAA,EAAAP,OAAA,WAAAC,GAAA;EAAA,IAAAA,GAAA,kBAAAA,GAAA;EAAA,IAAAA,GAAA,IAAAC,OAAA,IAAAA,OAAA,CAAAD,GAAA,MAAAM,0BAAA,CAAAN,GAAA;EAAAH,MAAA,CAAAK,cAAA,CAAAD,OAAA,EAAAD,GAAA;IAAAG,UAAA;IAAAC,GAAA,WAAAA,CAAA;MAAA,OAAAE,0BAAA,CAAAN,GAAA;IAAA;EAAA;AAAA;AACA,IAAAO,MAAA,GAAAZ,OAAA;AAAAE,MAAA,CAAAC,IAAA,CAAAS,MAAA,EAAAR,OAAA,WAAAC,GAAA;EAAA,IAAAA,GAAA,kBAAAA,GAAA;EAAA,IAAAA,GAAA,IAAAC,OAAA,IAAAA,OAAA,CAAAD,GAAA,MAAAO,MAAA,CAAAP,GAAA;EAAAH,MAAA,CAAAK,cAAA,CAAAD,OAAA,EAAAD,GAAA;IAAAG,UAAA;IAAAC,GAAA,WAAAA,CAAA;MAAA,OAAAG,MAAA,CAAAP,GAAA;IAAA;EAAA;AAAA;AACA,IAAAQ,MAAA,GAAAb,OAAA;AAAAE,MAAA,CAAAC,IAAA,CAAAU,MAAA,EAAAT,OAAA,WAAAC,GAAA;EAAA,IAAAA,GAAA,kBAAAA,GAAA;EAAA,IAAAA,GAAA,IAAAC,OAAA,IAAAA,OAAA,CAAAD,GAAA,MAAAQ,MAAA,CAAAR,GAAA;EAAAH,MAAA,CAAAK,cAAA,CAAAD,OAAA,EAAAD,GAAA;IAAAG,UAAA;IAAAC,GAAA,WAAAA,CAAA;MAAA,OAAAI,MAAA,CAAAR,GAAA;IAAA;EAAA;AAAA","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/commonjs/types.js b/node_modules/react-native-wgpu/lib/commonjs/types.js
new file mode 100644
index 0000000..2f0e414
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/commonjs/types.js
@@ -0,0 +1,2 @@
+"use strict";
+//# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/commonjs/types.js.map b/node_modules/react-native-wgpu/lib/commonjs/types.js.map
new file mode 100644
index 0000000..d9cdba6
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/commonjs/types.js.map
@@ -0,0 +1 @@
+{"version":3,"names":[],"sourceRoot":"../../src","sources":["types.ts"],"mappings":"","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/commonjs/utils.js b/node_modules/react-native-wgpu/lib/commonjs/utils.js
new file mode 100644
index 0000000..a1546e3
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/commonjs/utils.js
@@ -0,0 +1,11 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.contextIdToId = contextIdToId;
+// Only used on the web
+function contextIdToId(contextId) {
+  return "rnwgpu-canvas-" + contextId;
+}
+//# sourceMappingURL=utils.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/commonjs/utils.js.map b/node_modules/react-native-wgpu/lib/commonjs/utils.js.map
new file mode 100644
index 0000000..bd94027
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/commonjs/utils.js.map
@@ -0,0 +1 @@
+{"version":3,"names":["contextIdToId","contextId"],"sourceRoot":"../../src","sources":["utils.ts"],"mappings":";;;;;;AAAA;AACO,SAASA,aAAaA,CAACC,SAAiB,EAAE;EAC/C,OAAO,gBAAgB,GAAGA,SAAS;AACrC","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/module/Canvas.js b/node_modules/react-native-wgpu/lib/module/Canvas.js
index 1523899..7f0a866 100644
--- a/node_modules/react-native-wgpu/lib/module/Canvas.js
+++ b/node_modules/react-native-wgpu/lib/module/Canvas.js
@@ -1,6 +1,6 @@
 function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
 import { View } from "react-native";
-import { forwardRef, useEffect, useImperativeHandle, useRef, useState, useLayoutEffect, useCallback } from "react";
+import React, { forwardRef, useEffect, useImperativeHandle, useRef, useState, useLayoutEffect, useCallback } from "react";
 import WebGPUNativeView from "./WebGPUViewNativeComponent";
 let CONTEXT_COUNTER = 1;
 function generateContextId() {
@@ -52,8 +52,7 @@ export const Canvas = /*#__PURE__*/forwardRef(({
   ...props
 }, ref) => {
   const viewRef = useRef(null);
-  const FABRIC = RNWebGPU.fabric;
-  const useSize = FABRIC ? useSizeFabric : useSizePaper;
+  const useSize = RNWebGPU.fabric ? useSizeFabric : useSizePaper;
   const [contextId, _] = useState(() => generateContextId());
   const cb = useRef();
   const {
@@ -61,9 +60,13 @@ export const Canvas = /*#__PURE__*/forwardRef(({
     onLayout
   } = useSize(viewRef);
   useEffect(() => {
-    if (size && cb.current) {
+    const hasNonZeroDims = !!size?.height && !!size?.width;
+    if (size && hasNonZeroDims && cb.current) {
       cb.current();
     }
+    if (size && !hasNonZeroDims) {
+      console.warn([`react-native-wgpu canvas has zero dimensions (width:${size.width}px; height:${size.height}px)!`, "Unable to initialize underlying canvas."].join(" "));
+    }
   }, [size]);
   useImperativeHandle(ref, () => ({
     getContextId: () => contextId,
diff --git a/node_modules/react-native-wgpu/lib/module/Canvas.js.map b/node_modules/react-native-wgpu/lib/module/Canvas.js.map
index fe52598..e8413bd 100644
--- a/node_modules/react-native-wgpu/lib/module/Canvas.js.map
+++ b/node_modules/react-native-wgpu/lib/module/Canvas.js.map
@@ -1 +1 @@
-{"version":3,"names":["View","forwardRef","useEffect","useImperativeHandle","useRef","useState","useLayoutEffect","useCallback","WebGPUNativeView","CONTEXT_COUNTER","generateContextId","useSizeFabric","ref","size","setSize","current","Error","measureInWindow","_x","_y","width","height","onLayout","undefined","useSizePaper","_ref","nativeEvent","layout","Canvas","_onLayout","transparent","props","viewRef","FABRIC","RNWebGPU","fabric","useSize","contextId","_","cb","getContextId","getNativeSurface","whenReady","callback","getContext","contextName","MakeWebGPUCanvasContext","React","createElement","_extends","collapsable","style","flex"],"sourceRoot":"../../src","sources":["Canvas.tsx"],"mappings":"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","ignoreList":[]}
+{"version":3,"names":["View","React","forwardRef","useEffect","useImperativeHandle","useRef","useState","useLayoutEffect","useCallback","WebGPUNativeView","CONTEXT_COUNTER","generateContextId","useSizeFabric","ref","size","setSize","current","Error","measureInWindow","_x","_y","width","height","onLayout","undefined","useSizePaper","_ref","nativeEvent","layout","Canvas","_onLayout","transparent","props","viewRef","useSize","RNWebGPU","fabric","contextId","_","cb","hasNonZeroDims","console","warn","join","getContextId","getNativeSurface","whenReady","callback","getContext","contextName","MakeWebGPUCanvasContext","createElement","_extends","collapsable","style","flex"],"sourceRoot":"../../src","sources":["Canvas.tsx"],"mappings":"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","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/module/WebGPUView.js b/node_modules/react-native-wgpu/lib/module/WebGPUView.js
deleted file mode 100644
index d61956b..0000000
--- a/node_modules/react-native-wgpu/lib/module/WebGPUView.js
+++ /dev/null
@@ -1,2 +0,0 @@
-
-//# sourceMappingURL=WebGPUView.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/module/WebGPUView.js.map b/node_modules/react-native-wgpu/lib/module/WebGPUView.js.map
deleted file mode 100644
index b155bf5..0000000
--- a/node_modules/react-native-wgpu/lib/module/WebGPUView.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"names":[],"sourceRoot":"../../src","sources":["WebGPUView.tsx"],"mappings":"","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/module/WebGPUViewNativeComponent.web.js b/node_modules/react-native-wgpu/lib/module/WebGPUViewNativeComponent.web.js
new file mode 100644
index 0000000..5dac262
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/module/WebGPUViewNativeComponent.web.js
@@ -0,0 +1,78 @@
+import _ from "lodash";
+import { useEffect, useRef } from "react";
+import { StyleSheet } from "react-native";
+import { unstable_createElement as unstableCreateElement } from "react-native-web";
+import { contextIdToId } from "./utils";
+function resizeCanvas(canvas) {
+  if (!canvas) {
+    return;
+  }
+  const dpr = window.devicePixelRatio || 1;
+  const {
+    height,
+    width
+  } = canvas.getBoundingClientRect();
+  canvas.setAttribute("height", (height * dpr).toString());
+  canvas.setAttribute("width", (width * dpr).toString());
+}
+
+// eslint-disable-next-line import/no-default-export
+export default function WebGPUViewNativeComponent(props) {
+  const {
+    contextId,
+    style,
+    transparent,
+    ...rest
+  } = props;
+  const canvasElm = useRef();
+  useEffect(() => {
+    const onResize = _.debounce(() => resizeCanvas(canvasElm.current), 100, {
+      leading: false,
+      trailing: true,
+      maxWait: 2000
+    });
+    window.addEventListener("resize", onResize);
+    return () => {
+      window.removeEventListener("resize", onResize);
+    };
+  }, []);
+  return unstableCreateElement("canvas", {
+    ...rest,
+    style: [styles.view, styles.flex1, transparent === false && {
+      backgroundColor: "white"
+    },
+    // Canvas elements are transparent by default on the web
+    style],
+    id: contextIdToId(contextId),
+    ref: ref => {
+      canvasElm.current = ref;
+      if (ref) {
+        resizeCanvas(ref);
+      }
+    }
+  });
+}
+const styles = StyleSheet.create({
+  flex1: {
+    flex: 1
+  },
+  view: {
+    alignItems: "stretch",
+    backgroundColor: "transparent",
+    // @ts-expect-error - not a valid RN style, but it's valid for web
+    border: "0 solid black",
+    boxSizing: "border-box",
+    display: "flex",
+    flexBasis: "auto",
+    flexDirection: "column",
+    flexShrink: 0,
+    listStyle: "none",
+    margin: 0,
+    minHeight: 0,
+    minWidth: 0,
+    padding: 0,
+    position: "relative",
+    zIndex: 0
+  }
+});
+//# sourceMappingURL=WebGPUViewNativeComponent.web.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/module/WebGPUViewNativeComponent.web.js.map b/node_modules/react-native-wgpu/lib/module/WebGPUViewNativeComponent.web.js.map
new file mode 100644
index 0000000..4957abc
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/module/WebGPUViewNativeComponent.web.js.map
@@ -0,0 +1 @@
+{"version":3,"names":["_","useEffect","useRef","StyleSheet","unstable_createElement","unstableCreateElement","contextIdToId","resizeCanvas","canvas","dpr","window","devicePixelRatio","height","width","getBoundingClientRect","setAttribute","toString","WebGPUViewNativeComponent","props","contextId","style","transparent","rest","canvasElm","onResize","debounce","current","leading","trailing","maxWait","addEventListener","removeEventListener","styles","view","flex1","backgroundColor","id","ref","create","flex","alignItems","border","boxSizing","display","flexBasis","flexDirection","flexShrink","listStyle","margin","minHeight","minWidth","padding","position","zIndex"],"sourceRoot":"../../src","sources":["WebGPUViewNativeComponent.web.ts"],"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AACtB,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,sBAAsB,IAAIC,qBAAqB,QAAQ,kBAAkB;AAIlF,SAASC,aAAa,QAAQ,SAAS;AAOvC,SAASC,YAAYA,CAACC,MAA0B,EAAE;EAChD,IAAI,CAACA,MAAM,EAAE;IACX;EACF;EAEA,MAAMC,GAAG,GAAGC,MAAM,CAACC,gBAAgB,IAAI,CAAC;EAExC,MAAM;IAAEC,MAAM;IAAEC;EAAM,CAAC,GAAGL,MAAM,CAACM,qBAAqB,CAAC,CAAC;EACxDN,MAAM,CAACO,YAAY,CAAC,QAAQ,EAAE,CAACH,MAAM,GAAGH,GAAG,EAAEO,QAAQ,CAAC,CAAC,CAAC;EACxDR,MAAM,CAACO,YAAY,CAAC,OAAO,EAAE,CAACF,KAAK,GAAGJ,GAAG,EAAEO,QAAQ,CAAC,CAAC,CAAC;AACxD;;AAEA;AACA,eAAe,SAASC,yBAAyBA,CAACC,KAAkB,EAAE;EACpE,MAAM;IAAEC,SAAS;IAAEC,KAAK;IAAEC,WAAW;IAAE,GAAGC;EAAK,CAAC,GAAGJ,KAAK;EAExD,MAAMK,SAAS,GAAGrB,MAAM,CAAoB,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACd,MAAMuB,QAAQ,GAAGxB,CAAC,CAACyB,QAAQ,CAAC,MAAMlB,YAAY,CAACgB,SAAS,CAACG,OAAO,CAAC,EAAE,GAAG,EAAE;MACtEC,OAAO,EAAE,KAAK;MACdC,QAAQ,EAAE,IAAI;MACdC,OAAO,EAAE;IACX,CAAC,CAAC;IACFnB,MAAM,CAACoB,gBAAgB,CAAC,QAAQ,EAAEN,QAAQ,CAAC;IAC3C,OAAO,MAAM;MACXd,MAAM,CAACqB,mBAAmB,CAAC,QAAQ,EAAEP,QAAQ,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOnB,qBAAqB,CAAC,QAAQ,EAAE;IACrC,GAAGiB,IAAI;IACPF,KAAK,EAAE,CACLY,MAAM,CAACC,IAAI,EACXD,MAAM,CAACE,KAAK,EACZb,WAAW,KAAK,KAAK,IAAI;MAAEc,eAAe,EAAE;IAAQ,CAAC;IAAE;IACvDf,KAAK,CACN;IACDgB,EAAE,EAAE9B,aAAa,CAACa,SAAS,CAAC;IAC5BkB,GAAG,EAAGA,GAAsB,IAAK;MAC/Bd,SAAS,CAACG,OAAO,GAAGW,GAAG;MACvB,IAAIA,GAAG,EAAE;QACP9B,YAAY,CAAC8B,GAAG,CAAC;MACnB;IACF;EACF,CAAC,CAAC;AACJ;AAEA,MAAML,MAAM,GAAG7B,UAAU,CAACmC,MAAM,CAAC;EAC/BJ,KAAK,EAAE;IACLK,IAAI,EAAE;EACR,CAAC;EACDN,IAAI,EAAE;IACJO,UAAU,EAAE,SAAS;IACrBL,eAAe,EAAE,aAAa;IAC9B;IACAM,MAAM,EAAE,eAAe;IACvBC,SAAS,EAAE,YAAY;IACvBC,OAAO,EAAE,MAAM;IACfC,SAAS,EAAE,MAAM;IACjBC,aAAa,EAAE,QAAQ;IACvBC,UAAU,EAAE,CAAC;IACbC,SAAS,EAAE,MAAM;IACjBC,MAAM,EAAE,CAAC;IACTC,SAAS,EAAE,CAAC;IACZC,QAAQ,EAAE,CAAC;IACXC,OAAO,EAAE,CAAC;IACVC,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE;EACV;AACF,CAAC,CAAC","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/module/WebPolyfillGPUModule.js b/node_modules/react-native-wgpu/lib/module/WebPolyfillGPUModule.js
new file mode 100644
index 0000000..f1ec88c
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/module/WebPolyfillGPUModule.js
@@ -0,0 +1,35 @@
+import { contextIdToId } from "./utils";
+const fabric = true;
+function getNativeSurface(contextId) {
+  const canvas = document.getElementById(contextIdToId(contextId));
+  const {
+    height,
+    width
+  } = canvas.getBoundingClientRect();
+  return {
+    surface: BigInt(contextId),
+    height,
+    width,
+    clientHeight: height,
+    clientWidth: width
+  };
+}
+function makeWebGPUCanvasContext(contextId, width, height) {
+  const canvas = document.getElementById(contextIdToId(contextId));
+  if (canvas.getAttribute("width") !== width.toString() || canvas.getAttribute("height") !== height.toString()) {
+    canvas.setAttribute("width", width.toString());
+    canvas.setAttribute("height", height.toString());
+  }
+  const context = canvas.getContext("webgpu");
+  return Object.assign(context, {
+    present: () => {}
+  });
+}
+
+// @ts-expect-error - polyfill for RNWebGPU native module
+window.RNWebGPU = {
+  getNativeSurface,
+  MakeWebGPUCanvasContext: makeWebGPUCanvasContext,
+  fabric
+};
+//# sourceMappingURL=WebPolyfillGPUModule.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/module/WebPolyfillGPUModule.js.map b/node_modules/react-native-wgpu/lib/module/WebPolyfillGPUModule.js.map
new file mode 100644
index 0000000..2f7f127
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/module/WebPolyfillGPUModule.js.map
@@ -0,0 +1 @@
+{"version":3,"names":["contextIdToId","fabric","getNativeSurface","contextId","canvas","document","getElementById","height","width","getBoundingClientRect","surface","BigInt","clientHeight","clientWidth","makeWebGPUCanvasContext","getAttribute","toString","setAttribute","context","getContext","Object","assign","present","window","RNWebGPU","MakeWebGPUCanvasContext"],"sourceRoot":"../../src","sources":["WebPolyfillGPUModule.ts"],"mappings":"AAAA,SAASA,aAAa,QAAQ,SAAS;AAEvC,MAAMC,MAAM,GAAG,IAAI;AAEnB,SAASC,gBAAgBA,CAACC,SAAiB,EAAE;EAC3C,MAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAc,CACpCN,aAAa,CAACG,SAAS,CACzB,CAAsB;EAEtB,MAAM;IAAEI,MAAM;IAAEC;EAAM,CAAC,GAAGJ,MAAM,CAACK,qBAAqB,CAAC,CAAE;EAEzD,OAAO;IACLC,OAAO,EAAEC,MAAM,CAACR,SAAS,CAAC;IAC1BI,MAAM;IACNC,KAAK;IACLI,YAAY,EAAEL,MAAM;IACpBM,WAAW,EAAEL;EACf,CAAC;AACH;AAEA,SAASM,uBAAuBA,CAC9BX,SAAiB,EACjBK,KAAa,EACbD,MAAc,EACd;EACA,MAAMH,MAAM,GAAGC,QAAQ,CAACC,cAAc,CACpCN,aAAa,CAACG,SAAS,CACzB,CAAsB;EAEtB,IACEC,MAAM,CAACW,YAAY,CAAC,OAAO,CAAC,KAAKP,KAAK,CAACQ,QAAQ,CAAC,CAAC,IACjDZ,MAAM,CAACW,YAAY,CAAC,QAAQ,CAAC,KAAKR,MAAM,CAACS,QAAQ,CAAC,CAAC,EACnD;IACAZ,MAAM,CAACa,YAAY,CAAC,OAAO,EAAET,KAAK,CAACQ,QAAQ,CAAC,CAAC,CAAC;IAC9CZ,MAAM,CAACa,YAAY,CAAC,QAAQ,EAAEV,MAAM,CAACS,QAAQ,CAAC,CAAC,CAAC;EAClD;EAEA,MAAME,OAAO,GAAGd,MAAM,CAACe,UAAU,CAAC,QAAQ,CAAE;EAE5C,OAAOC,MAAM,CAACC,MAAM,CAACH,OAAO,EAAE;IAC5BI,OAAO,EAAEA,CAAA,KAAM,CAAC;EAClB,CAAC,CAAC;AACJ;;AAEA;AACAC,MAAM,CAACC,QAAQ,GAAG;EAChBtB,gBAAgB;EAChBuB,uBAAuB,EAAEX,uBAAuB;EAChDb;AACF,CAAC","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/module/index.js b/node_modules/react-native-wgpu/lib/module/index.js
index ee8e1a4..9cd5d2f 100644
--- a/node_modules/react-native-wgpu/lib/module/index.js
+++ b/node_modules/react-native-wgpu/lib/module/index.js
@@ -1,162 +1,5 @@
-/* eslint-disable @typescript-eslint/no-explicit-any */
-import WebGPUNativeModule from "./NativeWebGPUModule";
-export * from "./Canvas";
-export * from "./Offscreen";
-export * from "./WebGPUViewNativeComponent";
-export * from "./hooks";
-export { default as WebGPUModule } from "./NativeWebGPUModule";
-const GPU = {};
-GPU[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPU";
-};
-const GPUAdapter = {};
-GPUAdapter[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUAdapter";
-};
-const GPUAdapterInfo = {};
-GPUAdapterInfo[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUAdapterInfo";
-};
-const GPUBindGroup = {};
-GPUBindGroup[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUBindGroup";
-};
-const GPUBindGroupLayout = {};
-GPUBindGroupLayout[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUBindGroupLayout";
-};
-const GPUBuffer = {};
-GPUBuffer[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUBuffer";
-};
-const GPUCanvasContext = {};
-GPUCanvasContext[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUCanvasContext";
-};
-const GPUCommandBuffer = {};
-GPUCommandBuffer[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUCommandBuffer";
-};
-const GPUCommandEncoder = {};
-GPUCommandEncoder[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUCommandEncoder";
-};
-const GPUCompilationInfo = {};
-GPUCompilationInfo[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUCompilationInfo";
-};
-const GPUCompilationMessage = {};
-GPUCompilationMessage[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUCompilationMessage";
-};
-const GPUComputePassEncoder = {};
-GPUComputePassEncoder[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUComputePassEncoder";
-};
-const GPUComputePipeline = {};
-GPUComputePipeline[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUComputePipeline";
-};
-const GPUDevice = {};
-GPUDevice[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUDevice";
-};
-const GPUDeviceLostInfo = {};
-GPUDeviceLostInfo[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUDeviceLostInfo";
-};
-const GPUError = {};
-GPUError[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUError";
-};
-const GPUExternalTexture = {};
-GPUExternalTexture[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUExternalTexture";
-};
-const GPUPipelineLayout = {};
-GPUPipelineLayout[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUPipelineLayout";
-};
-const GPUQuerySet = {};
-GPUQuerySet[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUQuerySet";
-};
-const GPUQueue = {};
-GPUQueue[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUQueue";
-};
-const GPURenderBundle = {};
-GPURenderBundle[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPURenderBundle";
-};
-const GPURenderBundleEncoder = {};
-GPURenderBundleEncoder[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPURenderBundleEncoder";
-};
-const GPURenderPassEncoder = {};
-GPURenderPassEncoder[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPURenderPassEncoder";
-};
-const GPURenderPipeline = {};
-GPURenderPipeline[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPURenderPipeline";
-};
-const GPUSampler = {};
-GPUSampler[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUSampler";
-};
-const GPUShaderModule = {};
-GPUShaderModule[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUShaderModule";
-};
-const GPUTexture = {};
-GPUTexture[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUTexture";
-};
-const GPUTextureView = {};
-GPUTextureView[Symbol.hasInstance] = function (instance) {
-  return "__brand" in instance && instance.__brand === "GPUTextureView";
-};
-global.GPU = GPU;
-global.GPUAdapter = GPUAdapter;
-global.GPUAdapterInfo = GPUAdapterInfo;
-global.GPUBindGroup = GPUBindGroup;
-global.GPUBindGroupLayout = GPUBindGroupLayout;
-global.GPUBuffer = GPUBuffer;
-global.GPUCanvasContext = GPUCanvasContext;
-global.GPUCommandBuffer = GPUCommandBuffer;
-global.GPUCommandEncoder = GPUCommandEncoder;
-global.GPUCompilationInfo = GPUCompilationInfo;
-global.GPUCompilationMessage = GPUCompilationMessage;
-global.GPUComputePassEncoder = GPUComputePassEncoder;
-global.GPUComputePipeline = GPUComputePipeline;
-global.GPUDevice = GPUDevice;
-global.GPUDeviceLostInfo = GPUDeviceLostInfo;
-global.GPUError = GPUError;
-global.GPUExternalTexture = GPUExternalTexture;
-global.GPUPipelineLayout = GPUPipelineLayout;
-global.GPUQuerySet = GPUQuerySet;
-global.GPUQueue = GPUQueue;
-global.GPURenderBundle = GPURenderBundle;
-global.GPURenderBundleEncoder = GPURenderBundleEncoder;
-global.GPURenderPassEncoder = GPURenderPassEncoder;
-global.GPURenderPipeline = GPURenderPipeline;
-global.GPUSampler = GPUSampler;
-global.GPUShaderModule = GPUShaderModule;
-global.GPUTexture = GPUTexture;
-global.GPUTextureView = GPUTextureView;
-WebGPUNativeModule.install();
-if (!navigator) {
-  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
-  // @ts-expect-error
-  navigator = {};
-}
-// eslint-disable-next-line @typescript-eslint/ban-ts-comment
-// @ts-expect-error
-navigator.gpu = RNWebGPU.gpu;
+/// <reference types="@webgpu/types" />
 
-// eslint-disable-next-line @typescript-eslint/ban-ts-comment
-// @ts-ignore
-navigator.userAgent = "react-native";
-global.createImageBitmap = global.createImageBitmap ?? ((...params) => new Promise(resolve => resolve(RNWebGPU.createImageBitmap(...params))));
+export * from "./main";
+export {};
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/module/index.js.map b/node_modules/react-native-wgpu/lib/module/index.js.map
index 83860aa..bbcaf38 100644
--- a/node_modules/react-native-wgpu/lib/module/index.js.map
+++ b/node_modules/react-native-wgpu/lib/module/index.js.map
@@ -1 +1 @@
-{"version":3,"names":["WebGPUNativeModule","default","WebGPUModule","GPU","Symbol","hasInstance","instance","__brand","GPUAdapter","GPUAdapterInfo","GPUBindGroup","GPUBindGroupLayout","GPUBuffer","GPUCanvasContext","GPUCommandBuffer","GPUCommandEncoder","GPUCompilationInfo","GPUCompilationMessage","GPUComputePassEncoder","GPUComputePipeline","GPUDevice","GPUDeviceLostInfo","GPUError","GPUExternalTexture","GPUPipelineLayout","GPUQuerySet","GPUQueue","GPURenderBundle","GPURenderBundleEncoder","GPURenderPassEncoder","GPURenderPipeline","GPUSampler","GPUShaderModule","GPUTexture","GPUTextureView","global","install","navigator","gpu","RNWebGPU","userAgent","createImageBitmap","params","Promise","resolve"],"sourceRoot":"../../src","sources":["index.tsx"],"mappings":"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","ignoreList":[]}
+{"version":3,"names":[],"sourceRoot":"../../src","sources":["index.tsx"],"mappings":"AAAA;;AAIA,cAAc,QAAQ;AAAC","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/module/main/index.js b/node_modules/react-native-wgpu/lib/module/main/index.js
new file mode 100644
index 0000000..96b3dad
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/module/main/index.js
@@ -0,0 +1,159 @@
+/* eslint-disable @typescript-eslint/no-explicit-any */
+import WebGPUModule from "../NativeWebGPUModule";
+export * from "../Canvas";
+export * from "../Offscreen";
+export * from "../WebGPUViewNativeComponent";
+export * from "../hooks";
+export * from "../types";
+export { default as WebGPUModule } from "../NativeWebGPUModule";
+const GPU = {};
+GPU[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPU";
+};
+const GPUAdapter = {};
+GPUAdapter[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUAdapter";
+};
+const GPUAdapterInfo = {};
+GPUAdapterInfo[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUAdapterInfo";
+};
+const GPUBindGroup = {};
+GPUBindGroup[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUBindGroup";
+};
+const GPUBindGroupLayout = {};
+GPUBindGroupLayout[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUBindGroupLayout";
+};
+const GPUBuffer = {};
+GPUBuffer[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUBuffer";
+};
+const GPUCanvasContext = {};
+GPUCanvasContext[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUCanvasContext";
+};
+const GPUCommandBuffer = {};
+GPUCommandBuffer[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUCommandBuffer";
+};
+const GPUCommandEncoder = {};
+GPUCommandEncoder[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUCommandEncoder";
+};
+const GPUCompilationInfo = {};
+GPUCompilationInfo[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUCompilationInfo";
+};
+const GPUCompilationMessage = {};
+GPUCompilationMessage[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUCompilationMessage";
+};
+const GPUComputePassEncoder = {};
+GPUComputePassEncoder[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUComputePassEncoder";
+};
+const GPUComputePipeline = {};
+GPUComputePipeline[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUComputePipeline";
+};
+const GPUDevice = {};
+GPUDevice[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUDevice";
+};
+const GPUDeviceLostInfo = {};
+GPUDeviceLostInfo[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUDeviceLostInfo";
+};
+const GPUError = {};
+GPUError[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUError";
+};
+const GPUExternalTexture = {};
+GPUExternalTexture[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUExternalTexture";
+};
+const GPUPipelineLayout = {};
+GPUPipelineLayout[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUPipelineLayout";
+};
+const GPUQuerySet = {};
+GPUQuerySet[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUQuerySet";
+};
+const GPUQueue = {};
+GPUQueue[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUQueue";
+};
+const GPURenderBundle = {};
+GPURenderBundle[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPURenderBundle";
+};
+const GPURenderBundleEncoder = {};
+GPURenderBundleEncoder[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPURenderBundleEncoder";
+};
+const GPURenderPassEncoder = {};
+GPURenderPassEncoder[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPURenderPassEncoder";
+};
+const GPURenderPipeline = {};
+GPURenderPipeline[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPURenderPipeline";
+};
+const GPUSampler = {};
+GPUSampler[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUSampler";
+};
+const GPUShaderModule = {};
+GPUShaderModule[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUShaderModule";
+};
+const GPUTexture = {};
+GPUTexture[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUTexture";
+};
+const GPUTextureView = {};
+GPUTextureView[Symbol.hasInstance] = function (instance) {
+  return "__brand" in instance && instance.__brand === "GPUTextureView";
+};
+global.GPU = GPU;
+global.GPUAdapter = GPUAdapter;
+global.GPUAdapterInfo = GPUAdapterInfo;
+global.GPUBindGroup = GPUBindGroup;
+global.GPUBindGroupLayout = GPUBindGroupLayout;
+global.GPUBuffer = GPUBuffer;
+global.GPUCanvasContext = GPUCanvasContext;
+global.GPUCommandBuffer = GPUCommandBuffer;
+global.GPUCommandEncoder = GPUCommandEncoder;
+global.GPUCompilationInfo = GPUCompilationInfo;
+global.GPUCompilationMessage = GPUCompilationMessage;
+global.GPUComputePassEncoder = GPUComputePassEncoder;
+global.GPUComputePipeline = GPUComputePipeline;
+global.GPUDevice = GPUDevice;
+global.GPUDeviceLostInfo = GPUDeviceLostInfo;
+global.GPUError = GPUError;
+global.GPUExternalTexture = GPUExternalTexture;
+global.GPUPipelineLayout = GPUPipelineLayout;
+global.GPUQuerySet = GPUQuerySet;
+global.GPUQueue = GPUQueue;
+global.GPURenderBundle = GPURenderBundle;
+global.GPURenderBundleEncoder = GPURenderBundleEncoder;
+global.GPURenderPassEncoder = GPURenderPassEncoder;
+global.GPURenderPipeline = GPURenderPipeline;
+global.GPUSampler = GPUSampler;
+global.GPUShaderModule = GPUShaderModule;
+global.GPUTexture = GPUTexture;
+global.GPUTextureView = GPUTextureView;
+WebGPUModule.install();
+if (!navigator) {
+  // @ts-expect-error Navigation object is more complex than this, setting it to an empty object to add gpu property
+  navigator = {};
+}
+navigator.gpu = RNWebGPU.gpu;
+
+// @ts-expect-error: set a fake userAgent so code expecting it doesn’t break
+navigator.userAgent = "react-native";
+global.createImageBitmap = global.createImageBitmap ?? ((...params) => new Promise(resolve => resolve(RNWebGPU.createImageBitmap(...params))));
+//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/module/main/index.js.map b/node_modules/react-native-wgpu/lib/module/main/index.js.map
new file mode 100644
index 0000000..2407197
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/module/main/index.js.map
@@ -0,0 +1 @@
+{"version":3,"names":["WebGPUModule","default","GPU","Symbol","hasInstance","instance","__brand","GPUAdapter","GPUAdapterInfo","GPUBindGroup","GPUBindGroupLayout","GPUBuffer","GPUCanvasContext","GPUCommandBuffer","GPUCommandEncoder","GPUCompilationInfo","GPUCompilationMessage","GPUComputePassEncoder","GPUComputePipeline","GPUDevice","GPUDeviceLostInfo","GPUError","GPUExternalTexture","GPUPipelineLayout","GPUQuerySet","GPUQueue","GPURenderBundle","GPURenderBundleEncoder","GPURenderPassEncoder","GPURenderPipeline","GPUSampler","GPUShaderModule","GPUTexture","GPUTextureView","global","install","navigator","gpu","RNWebGPU","userAgent","createImageBitmap","params","Promise","resolve"],"sourceRoot":"../../../src","sources":["main/index.tsx"],"mappings":"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","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/module/main/index.web.js b/node_modules/react-native-wgpu/lib/module/main/index.web.js
new file mode 100644
index 0000000..b473b88
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/module/main/index.web.js
@@ -0,0 +1,9 @@
+import "../WebPolyfillGPUModule";
+export * from "../Canvas";
+export * from "../Offscreen";
+export * from "../WebGPUViewNativeComponent";
+export * from "../hooks";
+export * from "../types";
+
+// We don't need to set all global properties on web, webgpu is already available globally
+//# sourceMappingURL=index.web.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/module/main/index.web.js.map b/node_modules/react-native-wgpu/lib/module/main/index.web.js.map
new file mode 100644
index 0000000..cfd76fb
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/module/main/index.web.js.map
@@ -0,0 +1 @@
+{"version":3,"names":[],"sourceRoot":"../../../src","sources":["main/index.web.tsx"],"mappings":"AAAA,OAAO,yBAAyB;AAEhC,cAAc,WAAW;AACzB,cAAc,cAAc;AAC5B,cAAc,8BAA8B;AAC5C,cAAc,UAAU;AACxB,cAAc,UAAU;;AAExB","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/module/types.js b/node_modules/react-native-wgpu/lib/module/types.js
new file mode 100644
index 0000000..63b2c4c
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/module/types.js
@@ -0,0 +1,2 @@
+
+//# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/module/types.js.map b/node_modules/react-native-wgpu/lib/module/types.js.map
new file mode 100644
index 0000000..d9cdba6
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/module/types.js.map
@@ -0,0 +1 @@
+{"version":3,"names":[],"sourceRoot":"../../src","sources":["types.ts"],"mappings":"","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/module/utils.js b/node_modules/react-native-wgpu/lib/module/utils.js
new file mode 100644
index 0000000..488da54
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/module/utils.js
@@ -0,0 +1,5 @@
+// Only used on the web
+export function contextIdToId(contextId) {
+  return "rnwgpu-canvas-" + contextId;
+}
+//# sourceMappingURL=utils.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/module/utils.js.map b/node_modules/react-native-wgpu/lib/module/utils.js.map
new file mode 100644
index 0000000..b1d6dec
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/module/utils.js.map
@@ -0,0 +1 @@
+{"version":3,"names":["contextIdToId","contextId"],"sourceRoot":"../../src","sources":["utils.ts"],"mappings":"AAAA;AACA,OAAO,SAASA,aAAaA,CAACC,SAAiB,EAAE;EAC/C,OAAO,gBAAgB,GAAGA,SAAS;AACrC","ignoreList":[]}
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/Canvas.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/Canvas.d.ts
index f4f1357..3be7a77 100644
--- a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/Canvas.d.ts
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/Canvas.d.ts
@@ -1,4 +1,3 @@
 export const __esModule: boolean;
-export const Canvas: _react.ForwardRefExoticComponent<_react.RefAttributes<any>>;
-import _react = require("react");
+export const Canvas: any;
 //# sourceMappingURL=Canvas.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebGPUView.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebGPUView.d.ts
deleted file mode 100644
index 151f7c6..0000000
--- a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebGPUView.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-//# sourceMappingURL=WebGPUView.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebGPUView.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebGPUView.d.ts.map
deleted file mode 100644
index 9bc45cb..0000000
--- a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebGPUView.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"WebGPUView.d.ts","sourceRoot":"","sources":["../../../commonjs/WebGPUView.js"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebGPUViewNativeComponent.web.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebGPUViewNativeComponent.web.d.ts
new file mode 100644
index 0000000..839669a
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebGPUViewNativeComponent.web.d.ts
@@ -0,0 +1,5 @@
+export const __esModule: boolean;
+export default WebGPUViewNativeComponent;
+declare function WebGPUViewNativeComponent(props: any): _react.DetailedReactHTMLElement<any, HTMLElement>;
+import _react = require("react");
+//# sourceMappingURL=WebGPUViewNativeComponent.web.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebGPUViewNativeComponent.web.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebGPUViewNativeComponent.web.d.ts.map
new file mode 100644
index 0000000..f1a98f2
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebGPUViewNativeComponent.web.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"WebGPUViewNativeComponent.web.d.ts","sourceRoot":"","sources":["../../../commonjs/WebGPUViewNativeComponent.web.js"],"names":[],"mappings":";;AA0BA,0GAkCC"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebPolyfillGPUModule.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebPolyfillGPUModule.d.ts
new file mode 100644
index 0000000..1f075a2
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebPolyfillGPUModule.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=WebPolyfillGPUModule.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebPolyfillGPUModule.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebPolyfillGPUModule.d.ts.map
new file mode 100644
index 0000000..8e1aabe
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/WebPolyfillGPUModule.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"WebPolyfillGPUModule.d.ts","sourceRoot":"","sources":["../../../commonjs/WebPolyfillGPUModule.js"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/index.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/index.d.ts
index 67732c7..de3c7f4 100644
--- a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/index.d.ts
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/index.d.ts
@@ -1,3 +1,2 @@
 export const __esModule: boolean;
-export const WebGPUModule: any;
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/main/index.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/main/index.d.ts
new file mode 100644
index 0000000..67732c7
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/main/index.d.ts
@@ -0,0 +1,3 @@
+export const __esModule: boolean;
+export const WebGPUModule: any;
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/main/index.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/main/index.d.ts.map
new file mode 100644
index 0000000..5448f67
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/main/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../../commonjs/main/index.js"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/main/index.web.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/main/index.web.d.ts
new file mode 100644
index 0000000..f56ba8e
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/main/index.web.d.ts
@@ -0,0 +1,2 @@
+export const __esModule: boolean;
+//# sourceMappingURL=index.web.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/main/index.web.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/main/index.web.d.ts.map
new file mode 100644
index 0000000..4864317
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/main/index.web.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.web.d.ts","sourceRoot":"","sources":["../../../../commonjs/main/index.web.js"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/types.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/types.d.ts
new file mode 100644
index 0000000..2324761
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/types.d.ts
@@ -0,0 +1 @@
+//# sourceMappingURL=types.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/types.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/types.d.ts.map
new file mode 100644
index 0000000..4c59e3b
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/types.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"types.d.ts","sourceRoot":"","sources":["../../../commonjs/types.js"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/utils.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/utils.d.ts
new file mode 100644
index 0000000..e9259d2
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/utils.d.ts
@@ -0,0 +1,3 @@
+export const __esModule: boolean;
+export function contextIdToId(contextId: any): string;
+//# sourceMappingURL=utils.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/utils.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/utils.d.ts.map
new file mode 100644
index 0000000..14a60b9
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/commonjs/utils.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../../../commonjs/utils.js"],"names":[],"mappings":";AAOA,sDAEC"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/Canvas.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/module/Canvas.d.ts
index 71f4d12..341a554 100644
--- a/node_modules/react-native-wgpu/lib/typescript/lib/module/Canvas.d.ts
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/Canvas.d.ts
@@ -1,2 +1,3 @@
-export const Canvas: import("react").ForwardRefExoticComponent<import("react").RefAttributes<any>>;
+export const Canvas: React.ForwardRefExoticComponent<React.RefAttributes<any>>;
+import React from "react";
 //# sourceMappingURL=Canvas.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/Canvas.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/module/Canvas.d.ts.map
index 03f9a8c..ee79aeb 100644
--- a/node_modules/react-native-wgpu/lib/typescript/lib/module/Canvas.d.ts.map
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/Canvas.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"Canvas.d.ts","sourceRoot":"","sources":["../../../module/Canvas.js"],"names":[],"mappings":"AAgDA,mGAuDG"}
\ No newline at end of file
+{"version":3,"file":"Canvas.d.ts","sourceRoot":"","sources":["../../../module/Canvas.js"],"names":[],"mappings":"AAgDA,+EA0DG;kBAxG+G,OAAO"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/WebGPUView.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/module/WebGPUView.d.ts
deleted file mode 100644
index 151f7c6..0000000
--- a/node_modules/react-native-wgpu/lib/typescript/lib/module/WebGPUView.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-//# sourceMappingURL=WebGPUView.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/WebGPUView.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/module/WebGPUView.d.ts.map
deleted file mode 100644
index efc30e2..0000000
--- a/node_modules/react-native-wgpu/lib/typescript/lib/module/WebGPUView.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"WebGPUView.d.ts","sourceRoot":"","sources":["../../../module/WebGPUView.js"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/WebGPUViewNativeComponent.web.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/module/WebGPUViewNativeComponent.web.d.ts
new file mode 100644
index 0000000..89f7035
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/WebGPUViewNativeComponent.web.d.ts
@@ -0,0 +1,2 @@
+export default function WebGPUViewNativeComponent(props: any): import("react").DetailedReactHTMLElement<any, HTMLElement>;
+//# sourceMappingURL=WebGPUViewNativeComponent.web.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/WebGPUViewNativeComponent.web.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/module/WebGPUViewNativeComponent.web.d.ts.map
new file mode 100644
index 0000000..b3bf6f1
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/WebGPUViewNativeComponent.web.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"WebGPUViewNativeComponent.web.d.ts","sourceRoot":"","sources":["../../../module/WebGPUViewNativeComponent.web.js"],"names":[],"mappings":"AAmBA,0HAkCC"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/WebPolyfillGPUModule.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/module/WebPolyfillGPUModule.d.ts
new file mode 100644
index 0000000..1f075a2
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/WebPolyfillGPUModule.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=WebPolyfillGPUModule.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/WebPolyfillGPUModule.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/module/WebPolyfillGPUModule.d.ts.map
new file mode 100644
index 0000000..9125248
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/WebPolyfillGPUModule.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"WebPolyfillGPUModule.d.ts","sourceRoot":"","sources":["../../../module/WebPolyfillGPUModule.js"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/index.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/module/index.d.ts
index 318ee2d..3aaeb4a 100644
--- a/node_modules/react-native-wgpu/lib/typescript/lib/module/index.d.ts
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/index.d.ts
@@ -1,6 +1,2 @@
-export * from "./Canvas";
-export * from "./Offscreen";
-export * from "./WebGPUViewNativeComponent";
-export * from "./hooks";
-export { default as WebGPUModule } from "./NativeWebGPUModule";
+export * from "./main";
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/main/index.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/module/main/index.d.ts
new file mode 100644
index 0000000..ae2b336
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/main/index.d.ts
@@ -0,0 +1,6 @@
+export * from "../Canvas";
+export * from "../Offscreen";
+export * from "../WebGPUViewNativeComponent";
+export * from "../hooks";
+export { default as WebGPUModule } from "../NativeWebGPUModule";
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/main/index.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/module/main/index.d.ts.map
new file mode 100644
index 0000000..f285423
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/main/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../../module/main/index.js"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/main/index.web.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/module/main/index.web.d.ts
new file mode 100644
index 0000000..5e56302
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/main/index.web.d.ts
@@ -0,0 +1,5 @@
+export * from "../Canvas";
+export * from "../Offscreen";
+export * from "../WebGPUViewNativeComponent";
+export * from "../hooks";
+//# sourceMappingURL=index.web.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/main/index.web.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/module/main/index.web.d.ts.map
new file mode 100644
index 0000000..c6d6723
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/main/index.web.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.web.d.ts","sourceRoot":"","sources":["../../../../module/main/index.web.js"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/types.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/module/types.d.ts
new file mode 100644
index 0000000..2324761
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/types.d.ts
@@ -0,0 +1 @@
+//# sourceMappingURL=types.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/types.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/module/types.d.ts.map
new file mode 100644
index 0000000..a746eeb
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/types.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"types.d.ts","sourceRoot":"","sources":["../../../module/types.js"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/utils.d.ts b/node_modules/react-native-wgpu/lib/typescript/lib/module/utils.d.ts
new file mode 100644
index 0000000..b10daef
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/utils.d.ts
@@ -0,0 +1,2 @@
+export function contextIdToId(contextId: any): string;
+//# sourceMappingURL=utils.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/lib/module/utils.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/lib/module/utils.d.ts.map
new file mode 100644
index 0000000..73bdbea
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/lib/module/utils.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../../../module/utils.js"],"names":[],"mappings":"AACA,sDAEC"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/Canvas.d.ts b/node_modules/react-native-wgpu/lib/typescript/src/Canvas.d.ts
index 0ead69b..f70bec5 100644
--- a/node_modules/react-native-wgpu/lib/typescript/src/Canvas.d.ts
+++ b/node_modules/react-native-wgpu/lib/typescript/src/Canvas.d.ts
@@ -1,33 +1,7 @@
 import type { ViewProps } from "react-native";
-declare global {
-    var RNWebGPU: {
-        gpu: GPU;
-        fabric: boolean;
-        getNativeSurface: (contextId: number) => NativeCanvas;
-        MakeWebGPUCanvasContext: (contextId: number, width: number, height: number) => RNCanvasContext;
-        DecodeToUTF8: (buffer: NodeJS.ArrayBufferView | ArrayBuffer) => string;
-        createImageBitmap: typeof createImageBitmap;
-    };
-}
-type SurfacePointer = bigint;
-export interface NativeCanvas {
-    surface: SurfacePointer;
-    width: number;
-    height: number;
-    clientWidth: number;
-    clientHeight: number;
-}
-export type RNCanvasContext = GPUCanvasContext & {
-    present: () => void;
-};
-export interface CanvasRef {
-    getContextId: () => number;
-    getContext(contextName: "webgpu"): RNCanvasContext | null;
-    getNativeSurface: () => NativeCanvas;
-    whenReady: (callback: () => void) => void;
-}
-export declare const Canvas: import("react").ForwardRefExoticComponent<ViewProps & {
+import React from "react";
+import type { CanvasRef } from "./types";
+export declare const Canvas: React.ForwardRefExoticComponent<ViewProps & {
     transparent?: boolean;
-} & import("react").RefAttributes<CanvasRef>>;
-export {};
+} & React.RefAttributes<CanvasRef>>;
 //# sourceMappingURL=Canvas.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/Canvas.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/src/Canvas.d.ts.map
index 57c25e4..fb7c7e4 100644
--- a/node_modules/react-native-wgpu/lib/typescript/src/Canvas.d.ts.map
+++ b/node_modules/react-native-wgpu/lib/typescript/src/Canvas.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"Canvas.d.ts","sourceRoot":"","sources":["../../../src/Canvas.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,SAAS,EAAqB,MAAM,cAAc,CAAC;AAoBjE,OAAO,CAAC,MAAM,CAAC;IACb,IAAI,QAAQ,EAAE;QACZ,GAAG,EAAE,GAAG,CAAC;QACT,MAAM,EAAE,OAAO,CAAC;QAChB,gBAAgB,EAAE,CAAC,SAAS,EAAE,MAAM,KAAK,YAAY,CAAC;QACtD,uBAAuB,EAAE,CACvB,SAAS,EAAE,MAAM,EACjB,KAAK,EAAE,MAAM,EACb,MAAM,EAAE,MAAM,KACX,eAAe,CAAC;QACrB,YAAY,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,eAAe,GAAG,WAAW,KAAK,MAAM,CAAC;QACvE,iBAAiB,EAAE,OAAO,iBAAiB,CAAC;KAC7C,CAAC;CACH;AAED,KAAK,cAAc,GAAG,MAAM,CAAC;AAE7B,MAAM,WAAW,YAAY;IAC3B,OAAO,EAAE,cAAc,CAAC;IACxB,KAAK,EAAE,MAAM,CAAC;IACd,MAAM,EAAE,MAAM,CAAC;IACf,WAAW,EAAE,MAAM,CAAC;IACpB,YAAY,EAAE,MAAM,CAAC;CACtB;AAED,MAAM,MAAM,eAAe,GAAG,gBAAgB,GAAG;IAC/C,OAAO,EAAE,MAAM,IAAI,CAAC;CACrB,CAAC;AAEF,MAAM,WAAW,SAAS;IACxB,YAAY,EAAE,MAAM,MAAM,CAAC;IAC3B,UAAU,CAAC,WAAW,EAAE,QAAQ,GAAG,eAAe,GAAG,IAAI,CAAC;IAC1D,gBAAgB,EAAE,MAAM,YAAY,CAAC;IACrC,SAAS,EAAE,CAAC,QAAQ,EAAE,MAAM,IAAI,KAAK,IAAI,CAAC;CAC3C;AAqCD,eAAO,MAAM,MAAM;kBAEW,OAAO;6CAmDnC,CAAC"}
\ No newline at end of file
+{"version":3,"file":"Canvas.d.ts","sourceRoot":"","sources":["../../../src/Canvas.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,SAAS,EAAqB,MAAM,cAAc,CAAC;AAEjE,OAAO,KAQN,MAAM,OAAO,CAAC;AAIf,OAAO,KAAK,EAAE,SAAS,EAAmB,MAAM,SAAS,CAAC;AA0C1D,eAAO,MAAM,MAAM;kBAEW,OAAO;mCA8DnC,CAAC"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/WebGPUView.d.ts b/node_modules/react-native-wgpu/lib/typescript/src/WebGPUView.d.ts
deleted file mode 100644
index 151f7c6..0000000
--- a/node_modules/react-native-wgpu/lib/typescript/src/WebGPUView.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-//# sourceMappingURL=WebGPUView.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/WebGPUView.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/src/WebGPUView.d.ts.map
deleted file mode 100644
index bcc1af1..0000000
--- a/node_modules/react-native-wgpu/lib/typescript/src/WebGPUView.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"WebGPUView.d.ts","sourceRoot":"","sources":["../../../src/WebGPUView.tsx"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.d.ts b/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.d.ts
index 15bd233..0c1656f 100644
--- a/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.d.ts
+++ b/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.d.ts
@@ -1,6 +1,6 @@
 import type { Int32 } from "react-native/Libraries/Types/CodegenTypes";
 import type { ViewProps } from "react-native";
-interface NativeProps extends ViewProps {
+export interface NativeProps extends ViewProps {
     contextId: Int32;
     transparent: boolean;
 }
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.d.ts.map
index fb6aa08..8ddde6f 100644
--- a/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.d.ts.map
+++ b/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"WebGPUViewNativeComponent.d.ts","sourceRoot":"","sources":["../../../src/WebGPUViewNativeComponent.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,KAAK,EAAE,MAAM,2CAA2C,CAAC;AACvE,OAAO,KAAK,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAE9C,UAAU,WAAY,SAAQ,SAAS;IACrC,SAAS,EAAE,KAAK,CAAC;IACjB,WAAW,EAAE,OAAO,CAAC;CACtB;;AAGD,wBAAiE"}
\ No newline at end of file
+{"version":3,"file":"WebGPUViewNativeComponent.d.ts","sourceRoot":"","sources":["../../../src/WebGPUViewNativeComponent.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,KAAK,EAAE,MAAM,2CAA2C,CAAC;AACvE,OAAO,KAAK,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAE9C,MAAM,WAAW,WAAY,SAAQ,SAAS;IAC5C,SAAS,EAAE,KAAK,CAAC;IACjB,WAAW,EAAE,OAAO,CAAC;CACtB;;AAGD,wBAAiE"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.web.d.ts b/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.web.d.ts
new file mode 100644
index 0000000..12e77f4
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.web.d.ts
@@ -0,0 +1,118 @@
+import type { Int32 } from "react-native/Libraries/Types/CodegenTypes";
+import type { ViewProps } from "react-native";
+export interface NativeProps extends ViewProps {
+    contextId: Int32;
+    transparent: boolean;
+}
+export default function WebGPUViewNativeComponent(props: NativeProps): import("react").ReactElement<{
+    style: (import("react-native").StyleProp<import("react-native").ViewStyle> | {
+        flex: number;
+    } | {
+        alignItems: "stretch";
+        backgroundColor: string;
+        border: string;
+        boxSizing: "border-box";
+        display: "flex";
+        flexBasis: "auto";
+        flexDirection: "column";
+        flexShrink: number;
+        listStyle: string;
+        margin: number;
+        minHeight: number;
+        minWidth: number;
+        padding: number;
+        position: "relative";
+        zIndex: number;
+    })[];
+    id: string;
+    ref: (ref: HTMLCanvasElement) => void;
+    children?: React.ReactNode | undefined;
+    hitSlop?: null | import("react-native").Insets | number | undefined;
+    needsOffscreenAlphaCompositing?: boolean | undefined;
+    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
+    pointerEvents?: "box-none" | "none" | "box-only" | "auto" | undefined;
+    removeClippedSubviews?: boolean | undefined;
+    testID?: string | undefined;
+    nativeID?: string | undefined;
+    collapsable?: boolean | undefined;
+    collapsableChildren?: boolean | undefined;
+    onBlur?: ((e: import("react-native").BlurEvent) => void) | null | undefined;
+    onFocus?: ((e: import("react-native").FocusEvent) => void) | null | undefined;
+    renderToHardwareTextureAndroid?: boolean | undefined;
+    focusable?: boolean | undefined;
+    tabIndex?: 0 | -1 | undefined;
+    shouldRasterizeIOS?: boolean | undefined;
+    isTVSelectable?: boolean | undefined;
+    hasTVPreferredFocus?: boolean | undefined;
+    tvParallaxShiftDistanceX?: number | undefined;
+    tvParallaxShiftDistanceY?: number | undefined;
+    tvParallaxTiltAngle?: number | undefined;
+    tvParallaxMagnification?: number | undefined;
+    onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
+    onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
+    onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
+    onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
+    onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
+    onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
+    onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
+    onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
+    onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
+    onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
+    onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
+    onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
+    onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
+    onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
+    onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
+    onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
+    onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
+    onPointerEnter?: ((event: import("react-native").PointerEvent) => void) | undefined;
+    onPointerEnterCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
+    onPointerLeave?: ((event: import("react-native").PointerEvent) => void) | undefined;
+    onPointerLeaveCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
+    onPointerMove?: ((event: import("react-native").PointerEvent) => void) | undefined;
+    onPointerMoveCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
+    onPointerCancel?: ((event: import("react-native").PointerEvent) => void) | undefined;
+    onPointerCancelCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
+    onPointerDown?: ((event: import("react-native").PointerEvent) => void) | undefined;
+    onPointerDownCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
+    onPointerUp?: ((event: import("react-native").PointerEvent) => void) | undefined;
+    onPointerUpCapture?: ((event: import("react-native").PointerEvent) => void) | undefined;
+    accessible?: boolean | undefined;
+    accessibilityActions?: ReadonlyArray<import("react-native").AccessibilityActionInfo> | undefined;
+    accessibilityLabel?: string | undefined;
+    'aria-label'?: string | undefined;
+    accessibilityRole?: import("react-native").AccessibilityRole | undefined;
+    accessibilityState?: import("react-native").AccessibilityState | undefined;
+    'aria-busy'?: boolean | undefined;
+    'aria-checked'?: boolean | "mixed" | undefined;
+    'aria-disabled'?: boolean | undefined;
+    'aria-expanded'?: boolean | undefined;
+    'aria-selected'?: boolean | undefined;
+    accessibilityHint?: string | undefined;
+    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
+    'aria-valuemax'?: import("react-native").AccessibilityValue["max"] | undefined;
+    'aria-valuemin'?: import("react-native").AccessibilityValue["min"] | undefined;
+    'aria-valuenow'?: import("react-native").AccessibilityValue["now"] | undefined;
+    'aria-valuetext'?: import("react-native").AccessibilityValue["text"] | undefined;
+    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
+    importantForAccessibility?: ("auto" | "yes" | "no" | "no-hide-descendants") | undefined;
+    'aria-hidden'?: boolean | undefined;
+    'aria-modal'?: boolean | undefined;
+    role?: import("react-native").Role | undefined;
+    accessibilityLabelledBy?: string | string[] | undefined;
+    'aria-labelledby'?: string | undefined;
+    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
+    'aria-live'?: ("polite" | "assertive" | "off") | undefined;
+    screenReaderFocusable?: boolean | undefined;
+    accessibilityElementsHidden?: boolean | undefined;
+    accessibilityViewIsModal?: boolean | undefined;
+    onAccessibilityEscape?: (() => void) | undefined;
+    onAccessibilityTap?: (() => void) | undefined;
+    onMagicTap?: (() => void) | undefined;
+    accessibilityIgnoresInvertColors?: boolean | undefined;
+    accessibilityLanguage?: string | undefined;
+    accessibilityShowsLargeContentViewer?: boolean | undefined;
+    accessibilityLargeContentTitle?: string | undefined;
+    accessibilityRespondsToUserInteraction?: boolean | undefined;
+}, string | import("react").JSXElementConstructor<any>>;
+//# sourceMappingURL=WebGPUViewNativeComponent.web.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.web.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.web.d.ts.map
new file mode 100644
index 0000000..dee91b0
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/src/WebGPUViewNativeComponent.web.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"WebGPUViewNativeComponent.web.d.ts","sourceRoot":"","sources":["../../../src/WebGPUViewNativeComponent.web.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAAE,KAAK,EAAE,MAAM,2CAA2C,CAAC;AACvE,OAAO,KAAK,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAI9C,MAAM,WAAW,WAAY,SAAQ,SAAS;IAC5C,SAAS,EAAE,KAAK,CAAC;IACjB,WAAW,EAAE,OAAO,CAAC;CACtB;AAeD,MAAM,CAAC,OAAO,UAAU,yBAAyB,CAAC,KAAK,EAAE,WAAW;;;;;;;;;;;;;;;;;;;;;eA0BrD,iBAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDAO/B"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/WebPolyfillGPUModule.d.ts b/node_modules/react-native-wgpu/lib/typescript/src/WebPolyfillGPUModule.d.ts
new file mode 100644
index 0000000..1f075a2
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/src/WebPolyfillGPUModule.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=WebPolyfillGPUModule.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/WebPolyfillGPUModule.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/src/WebPolyfillGPUModule.d.ts.map
new file mode 100644
index 0000000..19f3d38
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/src/WebPolyfillGPUModule.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"WebPolyfillGPUModule.d.ts","sourceRoot":"","sources":["../../../src/WebPolyfillGPUModule.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/hooks.d.ts b/node_modules/react-native-wgpu/lib/typescript/src/hooks.d.ts
index 8d8c2a6..43e7e6d 100644
--- a/node_modules/react-native-wgpu/lib/typescript/src/hooks.d.ts
+++ b/node_modules/react-native-wgpu/lib/typescript/src/hooks.d.ts
@@ -1,5 +1,5 @@
 import type { ReactNode } from "react";
-import type { RNCanvasContext, CanvasRef, NativeCanvas } from "./Canvas";
+import type { CanvasRef, NativeCanvas, RNCanvasContext } from "./types";
 type Unsubscribe = () => void;
 export declare const warnIfNotHardwareAccelerated: (adapter: GPUAdapter) => void;
 interface DeviceContext {
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/hooks.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/src/hooks.d.ts.map
index 4bd38fa..bda3233 100644
--- a/node_modules/react-native-wgpu/lib/typescript/src/hooks.d.ts.map
+++ b/node_modules/react-native-wgpu/lib/typescript/src/hooks.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"hooks.d.ts","sourceRoot":"","sources":["../../../src/hooks.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAGvC,OAAO,KAAK,EAAE,eAAe,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AAEzE,KAAK,WAAW,GAAG,MAAM,IAAI,CAAC;AAE9B,eAAO,MAAM,4BAA4B,GAAI,SAAS,UAAU,SAQ/D,CAAC;AAEF,UAAU,aAAa;IACrB,MAAM,EAAE,SAAS,GAAG,IAAI,CAAC;IACzB,OAAO,EAAE,UAAU,GAAG,IAAI,CAAC;CAC5B;AAED,QAAA,MAAM,aAAa,+CAA4C,CAAC;AAEhE,UAAU,mBAAmB;IAC3B,QAAQ,CAAC,EAAE,SAAS,GAAG,SAAS,EAAE,CAAC;IACnC,cAAc,CAAC,EAAE,wBAAwB,CAAC;IAC1C,gBAAgB,CAAC,EAAE,mBAAmB,CAAC;CACxC;AAED,eAAO,MAAM,iBAAiB,GAAI,iDAI/B,mBAAmB,uCAQrB,CAAC;AAEF,eAAO,MAAM,UAAU;;;CAOtB,CAAC;AAEF,eAAO,MAAM,aAAa,qBAMzB,CAAC;AAEF,eAAO,MAAM,SAAS,GACpB,iBAAiB,wBAAwB,EACzC,mBAAmB,mBAAmB;;;CAqBvC,CAAC;AAEF,eAAO,MAAM,aAAa;;;CAOzB,CAAC;AAEF,eAAO,MAAM,eAAe,GAC1B,QAAQ,MACJ,IAAI,GACJ,WAAW,GACX,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,GAC3B,OAAO,CAAC,IAAI,CAAC,yCA0BlB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"hooks.d.ts","sourceRoot":"","sources":["../../../src/hooks.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAGvC,OAAO,KAAK,EAAE,SAAS,EAAE,YAAY,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAExE,KAAK,WAAW,GAAG,MAAM,IAAI,CAAC;AAE9B,eAAO,MAAM,4BAA4B,GAAI,SAAS,UAAU,SAQ/D,CAAC;AAEF,UAAU,aAAa;IACrB,MAAM,EAAE,SAAS,GAAG,IAAI,CAAC;IACzB,OAAO,EAAE,UAAU,GAAG,IAAI,CAAC;CAC5B;AAED,QAAA,MAAM,aAAa,+CAA4C,CAAC;AAEhE,UAAU,mBAAmB;IAC3B,QAAQ,CAAC,EAAE,SAAS,GAAG,SAAS,EAAE,CAAC;IACnC,cAAc,CAAC,EAAE,wBAAwB,CAAC;IAC1C,gBAAgB,CAAC,EAAE,mBAAmB,CAAC;CACxC;AAED,eAAO,MAAM,iBAAiB,GAAI,iDAI/B,mBAAmB,uCAQrB,CAAC;AAEF,eAAO,MAAM,UAAU;;;CAOtB,CAAC;AAEF,eAAO,MAAM,aAAa,qBAMzB,CAAC;AAEF,eAAO,MAAM,SAAS,GACpB,iBAAiB,wBAAwB,EACzC,mBAAmB,mBAAmB;;;CAqBvC,CAAC;AAEF,eAAO,MAAM,aAAa;;;CAOzB,CAAC;AAEF,eAAO,MAAM,eAAe,GAC1B,QAAQ,MACJ,IAAI,GACJ,WAAW,GACX,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,GAC3B,OAAO,CAAC,IAAI,CAAC,yCA0BlB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/index.d.ts b/node_modules/react-native-wgpu/lib/typescript/src/index.d.ts
index 318ee2d..430cc2c 100644
--- a/node_modules/react-native-wgpu/lib/typescript/src/index.d.ts
+++ b/node_modules/react-native-wgpu/lib/typescript/src/index.d.ts
@@ -1,6 +1,17 @@
-export * from "./Canvas";
-export * from "./Offscreen";
-export * from "./WebGPUViewNativeComponent";
-export * from "./hooks";
-export { default as WebGPUModule } from "./NativeWebGPUModule";
+import type { NativeCanvas, RNCanvasContext } from "./types";
+export * from "./main";
+declare global {
+    interface Navigator {
+        gpu: GPU;
+    }
+    var navigator: Navigator;
+    var RNWebGPU: {
+        gpu: GPU;
+        fabric: boolean;
+        getNativeSurface: (contextId: number) => NativeCanvas;
+        MakeWebGPUCanvasContext: (contextId: number, width: number, height: number) => RNCanvasContext;
+        DecodeToUTF8: (buffer: NodeJS.ArrayBufferView | ArrayBuffer) => string;
+        createImageBitmap: typeof createImageBitmap;
+    };
+}
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/index.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/src/index.d.ts.map
index f593ee4..cca9ad7 100644
--- a/node_modules/react-native-wgpu/lib/typescript/src/index.d.ts.map
+++ b/node_modules/react-native-wgpu/lib/typescript/src/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/index.tsx"],"names":[],"mappings":"AAGA,cAAc,UAAU,CAAC;AACzB,cAAc,aAAa,CAAC;AAC5B,cAAc,6BAA6B,CAAC;AAC5C,cAAc,SAAS,CAAC;AACxB,OAAO,EAAE,OAAO,IAAI,YAAY,EAAE,MAAM,sBAAsB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/index.tsx"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,YAAY,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAE7D,cAAc,QAAQ,CAAC;AAEvB,OAAO,CAAC,MAAM,CAAC;IACb,UAAU,SAAS;QACjB,GAAG,EAAE,GAAG,CAAC;KACV;IAED,IAAI,SAAS,EAAE,SAAS,CAAC;IAEzB,IAAI,QAAQ,EAAE;QACZ,GAAG,EAAE,GAAG,CAAC;QACT,MAAM,EAAE,OAAO,CAAC;QAChB,gBAAgB,EAAE,CAAC,SAAS,EAAE,MAAM,KAAK,YAAY,CAAC;QACtD,uBAAuB,EAAE,CACvB,SAAS,EAAE,MAAM,EACjB,KAAK,EAAE,MAAM,EACb,MAAM,EAAE,MAAM,KACX,eAAe,CAAC;QACrB,YAAY,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,eAAe,GAAG,WAAW,KAAK,MAAM,CAAC;QACvE,iBAAiB,EAAE,OAAO,iBAAiB,CAAC;KAC7C,CAAC;CACH"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/main/index.d.ts b/node_modules/react-native-wgpu/lib/typescript/src/main/index.d.ts
new file mode 100644
index 0000000..106f20d
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/src/main/index.d.ts
@@ -0,0 +1,7 @@
+export * from "../Canvas";
+export * from "../Offscreen";
+export * from "../WebGPUViewNativeComponent";
+export * from "../hooks";
+export * from "../types";
+export { default as WebGPUModule } from "../NativeWebGPUModule";
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/main/index.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/src/main/index.d.ts.map
new file mode 100644
index 0000000..9ad9d15
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/src/main/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../../src/main/index.tsx"],"names":[],"mappings":"AAGA,cAAc,WAAW,CAAC;AAC1B,cAAc,cAAc,CAAC;AAC7B,cAAc,8BAA8B,CAAC;AAC7C,cAAc,UAAU,CAAC;AACzB,cAAc,UAAU,CAAC;AACzB,OAAO,EAAE,OAAO,IAAI,YAAY,EAAE,MAAM,uBAAuB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/main/index.web.d.ts b/node_modules/react-native-wgpu/lib/typescript/src/main/index.web.d.ts
new file mode 100644
index 0000000..3ab6a1d
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/src/main/index.web.d.ts
@@ -0,0 +1,7 @@
+import "../WebPolyfillGPUModule";
+export * from "../Canvas";
+export * from "../Offscreen";
+export * from "../WebGPUViewNativeComponent";
+export * from "../hooks";
+export * from "../types";
+//# sourceMappingURL=index.web.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/main/index.web.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/src/main/index.web.d.ts.map
new file mode 100644
index 0000000..3bd704b
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/src/main/index.web.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.web.d.ts","sourceRoot":"","sources":["../../../../src/main/index.web.tsx"],"names":[],"mappings":"AAAA,OAAO,yBAAyB,CAAC;AAEjC,cAAc,WAAW,CAAC;AAC1B,cAAc,cAAc,CAAC;AAC7B,cAAc,8BAA8B,CAAC;AAC7C,cAAc,UAAU,CAAC;AACzB,cAAc,UAAU,CAAC"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/types.d.ts b/node_modules/react-native-wgpu/lib/typescript/src/types.d.ts
new file mode 100644
index 0000000..fc23467
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/src/types.d.ts
@@ -0,0 +1,19 @@
+type SurfacePointer = bigint;
+export interface NativeCanvas {
+    surface: SurfacePointer;
+    width: number;
+    height: number;
+    clientWidth: number;
+    clientHeight: number;
+}
+export type RNCanvasContext = GPUCanvasContext & {
+    present: () => void;
+};
+export interface CanvasRef {
+    getContextId: () => number;
+    getContext(contextName: "webgpu"): RNCanvasContext | null;
+    getNativeSurface: () => NativeCanvas;
+    whenReady: (callback: () => void) => void;
+}
+export {};
+//# sourceMappingURL=types.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/types.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/src/types.d.ts.map
new file mode 100644
index 0000000..df2351a
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/src/types.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"types.d.ts","sourceRoot":"","sources":["../../../src/types.ts"],"names":[],"mappings":"AAAA,KAAK,cAAc,GAAG,MAAM,CAAC;AAE7B,MAAM,WAAW,YAAY;IAC3B,OAAO,EAAE,cAAc,CAAC;IACxB,KAAK,EAAE,MAAM,CAAC;IACd,MAAM,EAAE,MAAM,CAAC;IACf,WAAW,EAAE,MAAM,CAAC;IACpB,YAAY,EAAE,MAAM,CAAC;CACtB;AAED,MAAM,MAAM,eAAe,GAAG,gBAAgB,GAAG;IAC/C,OAAO,EAAE,MAAM,IAAI,CAAC;CACrB,CAAC;AAEF,MAAM,WAAW,SAAS;IACxB,YAAY,EAAE,MAAM,MAAM,CAAC;IAC3B,UAAU,CAAC,WAAW,EAAE,QAAQ,GAAG,eAAe,GAAG,IAAI,CAAC;IAC1D,gBAAgB,EAAE,MAAM,YAAY,CAAC;IACrC,SAAS,EAAE,CAAC,QAAQ,EAAE,MAAM,IAAI,KAAK,IAAI,CAAC;CAC3C"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/utils.d.ts b/node_modules/react-native-wgpu/lib/typescript/src/utils.d.ts
new file mode 100644
index 0000000..302b3fa
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/src/utils.d.ts
@@ -0,0 +1,2 @@
+export declare function contextIdToId(contextId: number): string;
+//# sourceMappingURL=utils.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/lib/typescript/src/utils.d.ts.map b/node_modules/react-native-wgpu/lib/typescript/src/utils.d.ts.map
new file mode 100644
index 0000000..cac66ce
--- /dev/null
+++ b/node_modules/react-native-wgpu/lib/typescript/src/utils.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../../../src/utils.ts"],"names":[],"mappings":"AACA,wBAAgB,aAAa,CAAC,SAAS,EAAE,MAAM,UAE9C"}
\ No newline at end of file
diff --git a/node_modules/react-native-wgpu/libs/.DS_Store b/node_modules/react-native-wgpu/libs/.DS_Store
new file mode 100644
index 0000000..cd267f3
Binary files /dev/null and b/node_modules/react-native-wgpu/libs/.DS_Store differ
diff --git a/node_modules/react-native-wgpu/libs/android/.DS_Store b/node_modules/react-native-wgpu/libs/android/.DS_Store
new file mode 100644
index 0000000..8cf8528
Binary files /dev/null and b/node_modules/react-native-wgpu/libs/android/.DS_Store differ
diff --git a/node_modules/react-native-wgpu/src/.DS_Store b/node_modules/react-native-wgpu/src/.DS_Store
new file mode 100644
index 0000000..7e56df6
Binary files /dev/null and b/node_modules/react-native-wgpu/src/.DS_Store differ
diff --git a/node_modules/react-native-wgpu/src/Canvas.tsx b/node_modules/react-native-wgpu/src/Canvas.tsx
index ada17c3..242280f 100644
--- a/node_modules/react-native-wgpu/src/Canvas.tsx
+++ b/node_modules/react-native-wgpu/src/Canvas.tsx
@@ -1,6 +1,6 @@
 import type { ViewProps, LayoutChangeEvent } from "react-native";
 import { View } from "react-native";
-import {
+import React, {
   forwardRef,
   useEffect,
   useImperativeHandle,
@@ -12,48 +12,13 @@ import {
 import type { RefObject } from "react";
 
 import WebGPUNativeView from "./WebGPUViewNativeComponent";
+import type { CanvasRef, RNCanvasContext } from "./types";
 
 let CONTEXT_COUNTER = 1;
 function generateContextId() {
   return CONTEXT_COUNTER++;
 }
 
-declare global {
-  var RNWebGPU: {
-    gpu: GPU;
-    fabric: boolean;
-    getNativeSurface: (contextId: number) => NativeCanvas;
-    MakeWebGPUCanvasContext: (
-      contextId: number,
-      width: number,
-      height: number,
-    ) => RNCanvasContext;
-    DecodeToUTF8: (buffer: NodeJS.ArrayBufferView | ArrayBuffer) => string;
-    createImageBitmap: typeof createImageBitmap;
-  };
-}
-
-type SurfacePointer = bigint;
-
-export interface NativeCanvas {
-  surface: SurfacePointer;
-  width: number;
-  height: number;
-  clientWidth: number;
-  clientHeight: number;
-}
-
-export type RNCanvasContext = GPUCanvasContext & {
-  present: () => void;
-};
-
-export interface CanvasRef {
-  getContextId: () => number;
-  getContext(contextName: "webgpu"): RNCanvasContext | null;
-  getNativeSurface: () => NativeCanvas;
-  whenReady: (callback: () => void) => void;
-}
-
 interface Size {
   width: number;
   height: number;
@@ -94,16 +59,26 @@ export const Canvas = forwardRef<
   ViewProps & { transparent?: boolean }
 >(({ onLayout: _onLayout, transparent, ...props }, ref) => {
   const viewRef = useRef(null);
-  const FABRIC = RNWebGPU.fabric;
-  const useSize = FABRIC ? useSizeFabric : useSizePaper;
+  const useSize = RNWebGPU.fabric ? useSizeFabric : useSizePaper;
   const [contextId, _] = useState(() => generateContextId());
   const cb = useRef<() => void>();
   const { size, onLayout } = useSize(viewRef);
   useEffect(() => {
-    if (size && cb.current) {
+    const hasNonZeroDims = !!size?.height && !!size?.width;
+    if (size && hasNonZeroDims && cb.current) {
       cb.current();
     }
+
+    if (size && !hasNonZeroDims) {
+      console.warn(
+        [
+          `react-native-wgpu canvas has zero dimensions (width:${size.width}px; height:${size.height}px)!`,
+          "Unable to initialize underlying canvas.",
+        ].join(" "),
+      );
+    }
   }, [size]);
+
   useImperativeHandle(ref, () => ({
     getContextId: () => contextId,
     getNativeSurface: () => {
@@ -133,6 +108,7 @@ export const Canvas = forwardRef<
       );
     },
   }));
+
   return (
     <View collapsable={false} ref={viewRef} onLayout={onLayout} {...props}>
       <WebGPUNativeView
diff --git a/node_modules/react-native-wgpu/src/WebGPUViewNativeComponent.ts b/node_modules/react-native-wgpu/src/WebGPUViewNativeComponent.ts
index 8520c85..63c14dd 100644
--- a/node_modules/react-native-wgpu/src/WebGPUViewNativeComponent.ts
+++ b/node_modules/react-native-wgpu/src/WebGPUViewNativeComponent.ts
@@ -2,7 +2,7 @@ import { codegenNativeComponent } from "react-native";
 import type { Int32 } from "react-native/Libraries/Types/CodegenTypes";
 import type { ViewProps } from "react-native";
 
-interface NativeProps extends ViewProps {
+export interface NativeProps extends ViewProps {
   contextId: Int32;
   transparent: boolean;
 }
diff --git a/node_modules/react-native-wgpu/src/WebGPUViewNativeComponent.web.ts b/node_modules/react-native-wgpu/src/WebGPUViewNativeComponent.web.ts
new file mode 100644
index 0000000..0e88563
--- /dev/null
+++ b/node_modules/react-native-wgpu/src/WebGPUViewNativeComponent.web.ts
@@ -0,0 +1,85 @@
+import _ from "lodash";
+import { useEffect, useRef } from "react";
+import { StyleSheet } from "react-native";
+import { unstable_createElement as unstableCreateElement } from "react-native-web";
+import type { Int32 } from "react-native/Libraries/Types/CodegenTypes";
+import type { ViewProps } from "react-native";
+
+import { contextIdToId } from "./utils";
+
+export interface NativeProps extends ViewProps {
+  contextId: Int32;
+  transparent: boolean;
+}
+
+function resizeCanvas(canvas?: HTMLCanvasElement) {
+  if (!canvas) {
+    return;
+  }
+
+  const dpr = window.devicePixelRatio || 1;
+
+  const { height, width } = canvas.getBoundingClientRect();
+  canvas.setAttribute("height", (height * dpr).toString());
+  canvas.setAttribute("width", (width * dpr).toString());
+}
+
+// eslint-disable-next-line import/no-default-export
+export default function WebGPUViewNativeComponent(props: NativeProps) {
+  const { contextId, style, transparent, ...rest } = props;
+
+  const canvasElm = useRef<HTMLCanvasElement>();
+
+  useEffect(() => {
+    const onResize = _.debounce(() => resizeCanvas(canvasElm.current), 100, {
+      leading: false,
+      trailing: true,
+      maxWait: 2000,
+    });
+    window.addEventListener("resize", onResize);
+    return () => {
+      window.removeEventListener("resize", onResize);
+    };
+  }, []);
+
+  return unstableCreateElement("canvas", {
+    ...rest,
+    style: [
+      styles.view,
+      styles.flex1,
+      transparent === false && { backgroundColor: "white" }, // Canvas elements are transparent by default on the web
+      style,
+    ],
+    id: contextIdToId(contextId),
+    ref: (ref: HTMLCanvasElement) => {
+      canvasElm.current = ref;
+      if (ref) {
+        resizeCanvas(ref);
+      }
+    },
+  });
+}
+
+const styles = StyleSheet.create({
+  flex1: {
+    flex: 1,
+  },
+  view: {
+    alignItems: "stretch",
+    backgroundColor: "transparent",
+    // @ts-expect-error - not a valid RN style, but it's valid for web
+    border: "0 solid black",
+    boxSizing: "border-box",
+    display: "flex",
+    flexBasis: "auto",
+    flexDirection: "column",
+    flexShrink: 0,
+    listStyle: "none",
+    margin: 0,
+    minHeight: 0,
+    minWidth: 0,
+    padding: 0,
+    position: "relative",
+    zIndex: 0,
+  },
+});
diff --git a/node_modules/react-native-wgpu/src/WebPolyfillGPUModule.ts b/node_modules/react-native-wgpu/src/WebPolyfillGPUModule.ts
new file mode 100644
index 0000000..d03bdef
--- /dev/null
+++ b/node_modules/react-native-wgpu/src/WebPolyfillGPUModule.ts
@@ -0,0 +1,50 @@
+import { contextIdToId } from "./utils";
+
+const fabric = true;
+
+function getNativeSurface(contextId: number) {
+  const canvas = document.getElementById(
+    contextIdToId(contextId),
+  ) as HTMLCanvasElement;
+
+  const { height, width } = canvas.getBoundingClientRect()!;
+
+  return {
+    surface: BigInt(contextId),
+    height,
+    width,
+    clientHeight: height,
+    clientWidth: width,
+  };
+}
+
+function makeWebGPUCanvasContext(
+  contextId: number,
+  width: number,
+  height: number,
+) {
+  const canvas = document.getElementById(
+    contextIdToId(contextId),
+  ) as HTMLCanvasElement;
+
+  if (
+    canvas.getAttribute("width") !== width.toString() ||
+    canvas.getAttribute("height") !== height.toString()
+  ) {
+    canvas.setAttribute("width", width.toString());
+    canvas.setAttribute("height", height.toString());
+  }
+
+  const context = canvas.getContext("webgpu")!;
+
+  return Object.assign(context, {
+    present: () => {},
+  });
+}
+
+// @ts-expect-error - polyfill for RNWebGPU native module
+window.RNWebGPU = {
+  getNativeSurface,
+  MakeWebGPUCanvasContext: makeWebGPUCanvasContext,
+  fabric,
+};
diff --git a/node_modules/react-native-wgpu/src/hooks.tsx b/node_modules/react-native-wgpu/src/hooks.tsx
index 4b44743..1e29042 100644
--- a/node_modules/react-native-wgpu/src/hooks.tsx
+++ b/node_modules/react-native-wgpu/src/hooks.tsx
@@ -1,7 +1,7 @@
 import type { ReactNode } from "react";
 import { createContext, useContext, useEffect, useRef, useState } from "react";
 
-import type { RNCanvasContext, CanvasRef, NativeCanvas } from "./Canvas";
+import type { CanvasRef, NativeCanvas, RNCanvasContext } from "./types";
 
 type Unsubscribe = () => void;
 
diff --git a/node_modules/react-native-wgpu/src/index.tsx b/node_modules/react-native-wgpu/src/index.tsx
index 88d6e99..46875c2 100644
--- a/node_modules/react-native-wgpu/src/index.tsx
+++ b/node_modules/react-native-wgpu/src/index.tsx
@@ -1,197 +1,26 @@
-/* eslint-disable @typescript-eslint/no-explicit-any */
-import WebGPUNativeModule from "./NativeWebGPUModule";
-
-export * from "./Canvas";
-export * from "./Offscreen";
-export * from "./WebGPUViewNativeComponent";
-export * from "./hooks";
-export { default as WebGPUModule } from "./NativeWebGPUModule";
-
-const GPU: any = {};
-GPU[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPU";
-};
-
-const GPUAdapter: any = {};
-GPUAdapter[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUAdapter";
-};
-
-const GPUAdapterInfo: any = {};
-GPUAdapterInfo[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUAdapterInfo";
-};
-
-const GPUBindGroup: any = {};
-GPUBindGroup[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUBindGroup";
-};
-
-const GPUBindGroupLayout: any = {};
-GPUBindGroupLayout[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUBindGroupLayout";
-};
-
-const GPUBuffer: any = {};
-GPUBuffer[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUBuffer";
-};
-
-const GPUCanvasContext: any = {};
-GPUCanvasContext[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUCanvasContext";
-};
-
-const GPUCommandBuffer: any = {};
-GPUCommandBuffer[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUCommandBuffer";
-};
-
-const GPUCommandEncoder: any = {};
-GPUCommandEncoder[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUCommandEncoder";
-};
-
-const GPUCompilationInfo: any = {};
-GPUCompilationInfo[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUCompilationInfo";
-};
-
-const GPUCompilationMessage: any = {};
-GPUCompilationMessage[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUCompilationMessage";
-};
-
-const GPUComputePassEncoder: any = {};
-GPUComputePassEncoder[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUComputePassEncoder";
-};
-
-const GPUComputePipeline: any = {};
-GPUComputePipeline[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUComputePipeline";
-};
-
-const GPUDevice: any = {};
-GPUDevice[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUDevice";
-};
-
-const GPUDeviceLostInfo: any = {};
-GPUDeviceLostInfo[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUDeviceLostInfo";
-};
-
-const GPUError: any = {};
-GPUError[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUError";
-};
-
-const GPUExternalTexture: any = {};
-GPUExternalTexture[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUExternalTexture";
-};
-
-const GPUPipelineLayout: any = {};
-GPUPipelineLayout[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUPipelineLayout";
-};
-
-const GPUQuerySet: any = {};
-GPUQuerySet[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUQuerySet";
-};
-
-const GPUQueue: any = {};
-GPUQueue[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUQueue";
-};
-
-const GPURenderBundle: any = {};
-GPURenderBundle[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPURenderBundle";
-};
-
-const GPURenderBundleEncoder: any = {};
-GPURenderBundleEncoder[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPURenderBundleEncoder";
-};
-
-const GPURenderPassEncoder: any = {};
-GPURenderPassEncoder[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPURenderPassEncoder";
-};
-
-const GPURenderPipeline: any = {};
-GPURenderPipeline[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPURenderPipeline";
-};
-
-const GPUSampler: any = {};
-GPUSampler[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUSampler";
-};
-
-const GPUShaderModule: any = {};
-GPUShaderModule[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUShaderModule";
-};
-
-const GPUTexture: any = {};
-GPUTexture[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUTexture";
-};
-
-const GPUTextureView: any = {};
-GPUTextureView[Symbol.hasInstance] = function (instance: object) {
-  return "__brand" in instance && instance.__brand === "GPUTextureView";
-};
-
-global.GPU = GPU;
-global.GPUAdapter = GPUAdapter;
-global.GPUAdapterInfo = GPUAdapterInfo;
-global.GPUBindGroup = GPUBindGroup;
-global.GPUBindGroupLayout = GPUBindGroupLayout;
-global.GPUBuffer = GPUBuffer;
-global.GPUCanvasContext = GPUCanvasContext;
-global.GPUCommandBuffer = GPUCommandBuffer;
-global.GPUCommandEncoder = GPUCommandEncoder;
-global.GPUCompilationInfo = GPUCompilationInfo;
-global.GPUCompilationMessage = GPUCompilationMessage;
-global.GPUComputePassEncoder = GPUComputePassEncoder;
-global.GPUComputePipeline = GPUComputePipeline;
-global.GPUDevice = GPUDevice;
-global.GPUDeviceLostInfo = GPUDeviceLostInfo;
-global.GPUError = GPUError;
-global.GPUExternalTexture = GPUExternalTexture;
-global.GPUPipelineLayout = GPUPipelineLayout;
-global.GPUQuerySet = GPUQuerySet;
-global.GPUQueue = GPUQueue;
-global.GPURenderBundle = GPURenderBundle;
-global.GPURenderBundleEncoder = GPURenderBundleEncoder;
-global.GPURenderPassEncoder = GPURenderPassEncoder;
-global.GPURenderPipeline = GPURenderPipeline;
-global.GPUSampler = GPUSampler;
-global.GPUShaderModule = GPUShaderModule;
-global.GPUTexture = GPUTexture;
-global.GPUTextureView = GPUTextureView;
-
-WebGPUNativeModule.install();
-
-if (!navigator) {
-  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
-  // @ts-expect-error
-  navigator = {};
+/// <reference types="@webgpu/types" />
+
+import type { NativeCanvas, RNCanvasContext } from "./types";
+
+export * from "./main";
+
+declare global {
+  interface Navigator {
+    gpu: GPU;
+  }
+
+  var navigator: Navigator;
+
+  var RNWebGPU: {
+    gpu: GPU;
+    fabric: boolean;
+    getNativeSurface: (contextId: number) => NativeCanvas;
+    MakeWebGPUCanvasContext: (
+      contextId: number,
+      width: number,
+      height: number,
+    ) => RNCanvasContext;
+    DecodeToUTF8: (buffer: NodeJS.ArrayBufferView | ArrayBuffer) => string;
+    createImageBitmap: typeof createImageBitmap;
+  };
 }
-// eslint-disable-next-line @typescript-eslint/ban-ts-comment
-// @ts-expect-error
-navigator.gpu = RNWebGPU.gpu;
-
-// eslint-disable-next-line @typescript-eslint/ban-ts-comment
-// @ts-ignore
-navigator.userAgent = "react-native";
-
-global.createImageBitmap =
-  global.createImageBitmap ??
-  ((...params: Parameters<typeof createImageBitmap>) =>
-    new Promise((resolve) => resolve(RNWebGPU.createImageBitmap(...params))));
diff --git a/node_modules/react-native-wgpu/src/main/index.tsx b/node_modules/react-native-wgpu/src/main/index.tsx
new file mode 100644
index 0000000..0fa26e0
--- /dev/null
+++ b/node_modules/react-native-wgpu/src/main/index.tsx
@@ -0,0 +1,195 @@
+/* eslint-disable @typescript-eslint/no-explicit-any */
+import WebGPUModule from "../NativeWebGPUModule";
+
+export * from "../Canvas";
+export * from "../Offscreen";
+export * from "../WebGPUViewNativeComponent";
+export * from "../hooks";
+export * from "../types";
+export { default as WebGPUModule } from "../NativeWebGPUModule";
+
+const GPU: any = {};
+GPU[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPU";
+};
+
+const GPUAdapter: any = {};
+GPUAdapter[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUAdapter";
+};
+
+const GPUAdapterInfo: any = {};
+GPUAdapterInfo[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUAdapterInfo";
+};
+
+const GPUBindGroup: any = {};
+GPUBindGroup[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUBindGroup";
+};
+
+const GPUBindGroupLayout: any = {};
+GPUBindGroupLayout[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUBindGroupLayout";
+};
+
+const GPUBuffer: any = {};
+GPUBuffer[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUBuffer";
+};
+
+const GPUCanvasContext: any = {};
+GPUCanvasContext[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUCanvasContext";
+};
+
+const GPUCommandBuffer: any = {};
+GPUCommandBuffer[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUCommandBuffer";
+};
+
+const GPUCommandEncoder: any = {};
+GPUCommandEncoder[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUCommandEncoder";
+};
+
+const GPUCompilationInfo: any = {};
+GPUCompilationInfo[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUCompilationInfo";
+};
+
+const GPUCompilationMessage: any = {};
+GPUCompilationMessage[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUCompilationMessage";
+};
+
+const GPUComputePassEncoder: any = {};
+GPUComputePassEncoder[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUComputePassEncoder";
+};
+
+const GPUComputePipeline: any = {};
+GPUComputePipeline[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUComputePipeline";
+};
+
+const GPUDevice: any = {};
+GPUDevice[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUDevice";
+};
+
+const GPUDeviceLostInfo: any = {};
+GPUDeviceLostInfo[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUDeviceLostInfo";
+};
+
+const GPUError: any = {};
+GPUError[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUError";
+};
+
+const GPUExternalTexture: any = {};
+GPUExternalTexture[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUExternalTexture";
+};
+
+const GPUPipelineLayout: any = {};
+GPUPipelineLayout[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUPipelineLayout";
+};
+
+const GPUQuerySet: any = {};
+GPUQuerySet[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUQuerySet";
+};
+
+const GPUQueue: any = {};
+GPUQueue[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUQueue";
+};
+
+const GPURenderBundle: any = {};
+GPURenderBundle[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPURenderBundle";
+};
+
+const GPURenderBundleEncoder: any = {};
+GPURenderBundleEncoder[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPURenderBundleEncoder";
+};
+
+const GPURenderPassEncoder: any = {};
+GPURenderPassEncoder[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPURenderPassEncoder";
+};
+
+const GPURenderPipeline: any = {};
+GPURenderPipeline[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPURenderPipeline";
+};
+
+const GPUSampler: any = {};
+GPUSampler[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUSampler";
+};
+
+const GPUShaderModule: any = {};
+GPUShaderModule[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUShaderModule";
+};
+
+const GPUTexture: any = {};
+GPUTexture[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUTexture";
+};
+
+const GPUTextureView: any = {};
+GPUTextureView[Symbol.hasInstance] = function (instance: object) {
+  return "__brand" in instance && instance.__brand === "GPUTextureView";
+};
+
+global.GPU = GPU;
+global.GPUAdapter = GPUAdapter;
+global.GPUAdapterInfo = GPUAdapterInfo;
+global.GPUBindGroup = GPUBindGroup;
+global.GPUBindGroupLayout = GPUBindGroupLayout;
+global.GPUBuffer = GPUBuffer;
+global.GPUCanvasContext = GPUCanvasContext;
+global.GPUCommandBuffer = GPUCommandBuffer;
+global.GPUCommandEncoder = GPUCommandEncoder;
+global.GPUCompilationInfo = GPUCompilationInfo;
+global.GPUCompilationMessage = GPUCompilationMessage;
+global.GPUComputePassEncoder = GPUComputePassEncoder;
+global.GPUComputePipeline = GPUComputePipeline;
+global.GPUDevice = GPUDevice;
+global.GPUDeviceLostInfo = GPUDeviceLostInfo;
+global.GPUError = GPUError;
+global.GPUExternalTexture = GPUExternalTexture;
+global.GPUPipelineLayout = GPUPipelineLayout;
+global.GPUQuerySet = GPUQuerySet;
+global.GPUQueue = GPUQueue;
+global.GPURenderBundle = GPURenderBundle;
+global.GPURenderBundleEncoder = GPURenderBundleEncoder;
+global.GPURenderPassEncoder = GPURenderPassEncoder;
+global.GPURenderPipeline = GPURenderPipeline;
+global.GPUSampler = GPUSampler;
+global.GPUShaderModule = GPUShaderModule;
+global.GPUTexture = GPUTexture;
+global.GPUTextureView = GPUTextureView;
+
+WebGPUModule.install();
+
+if (!navigator) {
+  // @ts-expect-error Navigation object is more complex than this, setting it to an empty object to add gpu property
+  navigator = {};
+}
+
+navigator.gpu = RNWebGPU.gpu;
+
+// @ts-expect-error: set a fake userAgent so code expecting it doesn’t break
+navigator.userAgent = "react-native";
+
+global.createImageBitmap =
+  global.createImageBitmap ??
+  ((...params: Parameters<typeof createImageBitmap>) =>
+    new Promise((resolve) => resolve(RNWebGPU.createImageBitmap(...params))));
diff --git a/node_modules/react-native-wgpu/src/main/index.web.tsx b/node_modules/react-native-wgpu/src/main/index.web.tsx
new file mode 100644
index 0000000..9afca89
--- /dev/null
+++ b/node_modules/react-native-wgpu/src/main/index.web.tsx
@@ -0,0 +1,9 @@
+import "../WebPolyfillGPUModule";
+
+export * from "../Canvas";
+export * from "../Offscreen";
+export * from "../WebGPUViewNativeComponent";
+export * from "../hooks";
+export * from "../types";
+
+// We don't need to set all global properties on web, webgpu is already available globally
diff --git a/node_modules/react-native-wgpu/src/types.ts b/node_modules/react-native-wgpu/src/types.ts
new file mode 100644
index 0000000..af4684c
--- /dev/null
+++ b/node_modules/react-native-wgpu/src/types.ts
@@ -0,0 +1,20 @@
+type SurfacePointer = bigint;
+
+export interface NativeCanvas {
+  surface: SurfacePointer;
+  width: number;
+  height: number;
+  clientWidth: number;
+  clientHeight: number;
+}
+
+export type RNCanvasContext = GPUCanvasContext & {
+  present: () => void;
+};
+
+export interface CanvasRef {
+  getContextId: () => number;
+  getContext(contextName: "webgpu"): RNCanvasContext | null;
+  getNativeSurface: () => NativeCanvas;
+  whenReady: (callback: () => void) => void;
+}
diff --git a/node_modules/react-native-wgpu/src/utils.ts b/node_modules/react-native-wgpu/src/utils.ts
new file mode 100644
index 0000000..39fa1b8
--- /dev/null
+++ b/node_modules/react-native-wgpu/src/utils.ts
@@ -0,0 +1,4 @@
+// Only used on the web
+export function contextIdToId(contextId: number) {
+  return "rnwgpu-canvas-" + contextId;
+}
